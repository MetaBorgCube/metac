module generate-c

language MetaC

test declare channel variable and include csp.h header [[
  void f() {
    chan<int> c;
  }
]] build generate-c to "
  #include <csp.h>
  void f() {
    Channel *c;
    Channel __c_csp_channel;
    c = &__c_csp_channel;
    CSP_chanInit(c, CSP_ONE2ONE_CHANNEL, 0);
  }"

test empty process [[
  process f() {
  }
]] build generate-c to "
  #include <process.h>
  typedef struct { } f_ProcessArgs;
  void f (Process *__csp_process__) {
    f_ProcessArgs *args = __csp_process__->args;
    unsigned char __csp_process_recurse = 0;
    do { } while (__csp_process_recurse);
  }"

test process with an int argument [[
  process f(int a) {
  }
]] build generate-c to "
  #include <process.h>
  typedef struct {
    signed int a;
  } f_ProcessArgs;
  void f (Process *__csp_process__) {
    f_ProcessArgs *args = __csp_process__->args;
    signed int a = args->a;
    unsigned char __csp_process_recurse = 0;
    do {
    } while (__csp_process_recurse);
  }"

test process recursive process [[
  process f(int a @ int b) {
    f(31);
  }
]] build generate-c to "
  #include <process.h>
  typedef struct {
    signed int a;
    signed int b;
  } f_ProcessArgs;
  void f (Process *__csp_process__) {
    f_ProcessArgs *args = __csp_process__->args;
    signed int a = args->a;
    signed int b = args->b;
    unsigned char __csp_process_recurse = 0;
    do {
      b = 31;
      __csp_process_recurse = 1;
      continue;
    } while (__csp_process_recurse);
  }"

test process with channels as argument [[
  process f(chan<uint8> a, chan<uint16> b) {
  }
]] build generate-c to "
  #include <process.h>
  #include <csp.h>
  typedef struct {
    Channel *a;
    Channel *b;
  } f_ProcessArgs;
  void f (Process *__csp_process__) {
    f_ProcessArgs *args = __csp_process__->args;
    Channel *a = args->a;
    Channel *b = args->b;
    unsigned char __csp_process_recurse = 0;
    do { } while (__csp_process_recurse);
  }"

test write char to a channel [[
  process f(chan<uint8> a) {
    [[a ! 1]];
  }
]] build generate-c to "
  CSP_chanOutInt8(a, 1)"

test write short to a channel [[
  process f(chan<uint16> a) {
    [[a ! 1]];
  }
]] build generate-c to "
  CSP_chanOutInt16(a, 1)"

test write int to a channel [[
  process f(chan<uint32> a) {
    [[a ! 1]];
  }
]] build generate-c to "
  CSP_chanOutInt32(a, 1)"

test write long to a channel [[
  process f(chan<uint64> a) {
    [[a ! 1]];
  }
]] build generate-c to "
  CSP_chanOutInt64(a, 1)"

test write some struct variable to a channel [[
  struct X {};
  process f(chan<struct X> a) {
    struct X b;
    [[a ! b]];
  }
]] build generate-c to "
  CSP_chanOutCopy(a, &b, sizeof (struct X))"

test write some struct pointer variable to a channel [[
  struct X {};
  process f(chan<struct X*> a) {
    struct X *b;
    [[a ! b]];
  }
]] build generate-c to "
  CSP_chanOutCopy(a, &b, sizeof (struct X *))"

test write some struct expression to a channel [[
  struct X {struct X *x; };
  process f(chan<struct X *> a) {
    struct X *b;
    [[{
      a ! b->x;
    }]]
  }
]] build generate-c-csp-test to "{
    struct X *temp_var;
    (temp_var = b->x, CSP_chanOutCopy(a, &temp_var, sizeof (struct X *)));
  }"

test reading an int from a channel [[
  process f(chan<int32> a) {
    [[{
      int32 b;
      a ? b;
    }]]
  }
]] build generate-c to "{
    signed int b;
    (CSP_chanInCopy(a, &b, sizeof (signed int)), b);
  }"

test reading a struct from a channel [[
  struct X {};
  process f(chan<struct X> a) {
    [[{
      struct X b;
      a ? b;
    }]]
  }
]] build generate-c to "{
    struct X b;
    (CSP_chanInCopy(a, &b, sizeof (struct X)), b);
  }"

test par run processes [[
  process P(int32 a) {}
  process C(int32 c) {}
  void main () {
    [[par {
      P(1);
      C(4);
    }]]
  }
]] build generate-c to "{
    Process P_proc_1;
    P_ProcessArgs P_proc_1_args;
    P_proc_1_args.a = 1;
    P_proc_1.args = &P_proc_1_args;
    ProcInit(&P_proc_1, P, NULL, 0, 0);
    Process C_proc_2;
    C_ProcessArgs C_proc_2_args;
    C_proc_2_args.c = 4;
    C_proc_2.args = &C_proc_2_args;
    ProcInit(&C_proc_2, C, NULL, 0, 0);
    ProcPar(&P_proc_1, &C_proc_2, NULL);
    ProcInitClean(&P_proc_1);
    ProcInitClean(&C_proc_2);
  }"

test par run processes with state [[
  process P(int32 a @ int32 b) {}
  process C(int32 c) {}
  void main () {
    [[par {
      P(1 @ 2);
      C(4);
    }]]
  }
]] build generate-c to "{
    Process P_proc_1;
    P_ProcessArgs P_proc_1_args;
    P_proc_1_args.a = 1;
    P_proc_1_args.b = 2;
    P_proc_1.args = &P_proc_1_args;
    ProcInit(&P_proc_1, P, NULL, 0, 0);
    Process C_proc_2;
    C_ProcessArgs C_proc_2_args;
    C_proc_2_args.c = 4;
    C_proc_2.args = &C_proc_2_args;
    ProcInit(&C_proc_2, C, NULL, 0, 0);
    ProcPar(&P_proc_1, &C_proc_2, NULL);
    ProcInitClean(&P_proc_1);
    ProcInitClean(&C_proc_2);
  }"

test alts without cases [[
  process f() {
    [[alts { }]]
  }
]] build generate-c to "{}"

test alts single channel [[
  process f(chan<int> c) {
    int v;
    [[alts {
      case c: ;
      case c ? v: v;
    }]]
  }
]] build generate-c to "{
    CSP_Alt_t alt;
    Channel * clist[2];
    clist[0] = c;
    clist[1] = c;
    CSP_altInit(&alt);
    switch (CSP_priAltSelect(&alt, clist, 2)) {
      case 0: {
        {
          signed int tmp;
          (CSP_chanInCopy(c, &tmp, sizeof (signed int)), tmp);
        }
        ;
        break;
      }
      case 1: {
        (CSP_chanInCopy(c, &v, sizeof (signed int)), v);
        v;
        break;
      }
    }
    CSP_altClose(&alt);
  }"

test alt with a guard [[
  process P(chan<int> c, chan<int> d, chan<int> e) {
    int a = 1, b = 2, x;
    alts {
      case [a < b] c ? x: ;
      case d: ;
      case [1] e: ;
    }
  }
]] build generate-c-csp-test to "
  #include <process.h>
  #include <csp.h>
  typedef struct { Channel *c; Channel *d; Channel *e; } P_ProcessArgs;
  typedef struct { signed int *a; signed int *b; } guard_env;
  int guard_callback (void *__env__) {
    guard_env *__env2__ = (guard_env*) __env__;
    return *__env2__->a < *__env2__->b;
  }
  int guard_callback(void *__env__) {
    return 1;
  }
  void P (Process *__csp_process__) {
    P_ProcessArgs *args = __csp_process__->args;
    Channel *c = args->c;
    Channel *d = args->d;
    Channel *e = args->e;
    unsigned char __csp_process_recurse = 0;
    do {
      signed int a = 1;
      signed int b = 2;
      signed int x;
      {
        CSP_Alt_t alt;
        Channel *clist[3];
        guard_env guard_env_var = {&a, &b};
        struct CSP_Alt_Guard guard = {&guard_callback, &guard_env_var};
        c->altGuard = &guard;
        clist[0] = c;
        clist[1] = d;
        void * guard_env_var = 0;
        struct CSP_Alt_Guard guard = {&guard_callback, &guard_env_var};
        e->altGuard = &guard;
        clist[2] = e;
        CSP_altInit(&alt);
        switch (CSP_priAltSelect(&alt, clist, 3)) {
          case 0: { (CSP_chanInCopy(c, &x, sizeof (signed int)), x); ; break ; }
          case 1: { { signed int tmp; (CSP_chanInCopy(d, &tmp, sizeof (signed int)), tmp); } ; break ; }
          case 2: { { signed int tmp; (CSP_chanInCopy(e, &tmp, sizeof (signed int)), tmp); } ; break ; }
        }
        CSP_altClose(&alt);
      }
    } while (__csp_process_recurse);
  }"
