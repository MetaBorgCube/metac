module MetaC/bitfields/trans/names

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/relations/-
  lib/runtime/editor/-
  include/Metac
  BaseC/trans/names/BaseC-typedefs
  MetaC/bitfields/trans/trans
  MetaC/bitfields/trans/desugar
  MetaC/bitfields/trans/names-custom


signature
  constructors
    NablNsBitfield : Namespace


signature
  constructors
    NablProp_bitfield-size  : Property
    NablProp_bitfield-range : Property


rules

  nabl-custom-properties(add-properties) =
    ![NablProp_bitfield-size(), NablProp_bitfield-range()]
    ; add-properties

  bitfield-size-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  bitfield-size-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  bitfield-size-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_bitfield-size())

  bitfield-size-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  bitfield-size-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  bitfield-size-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_bitfield-size(), ctx__, [])

  bitfield-size-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_bitfield-size(), ctx__, dep*)

  bitfield-size-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_bitfield-size()
    , ctx__
    , Eq()
    , expected
    )

  bitfield-size-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_bitfield-size(), ctx__, relation, expected)

  create-bitfield-size-task(|ctx__) =
    fail

  get-bitfield-size(|) =
    get-property(|NablProp_bitfield-size())

  store-bitfield-size(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_bitfield-size(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-bitfield-size-task(|ctx__)> term
    where NablProp_bitfield-size() := kind

  bitfield-range-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  bitfield-range-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  bitfield-range-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_bitfield-range())

  bitfield-range-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  bitfield-range-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  bitfield-range-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_bitfield-range(), ctx__, [])

  bitfield-range-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_bitfield-range(), ctx__, dep*)

  bitfield-range-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_bitfield-range()
    , ctx__
    , Eq()
    , expected
    )

  bitfield-range-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_bitfield-range(), ctx__, relation, expected)

  create-bitfield-range-task(|ctx__) =
    fail

  get-bitfield-range(|) =
    get-property(|NablProp_bitfield-range())

  store-bitfield-range(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_bitfield-range(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-bitfield-range-task(|ctx__)> term
    where NablProp_bitfield-range() := kind


rules

  nabl-get-scope =
    ?Bitfields(Identifier(name), _, size)
    ; ![NablNsBitfield()]

  nabl-get-name :
    Bitfields(Identifier(name), _, size) -> name

  nabl-name-apply(s) =
    Bitfields(Identifier(s), id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?Bitfields(Identifier(name), _, size)
    ; origin-track-forced(
        Bitfields(
          origin-track-forced(
            Identifier(
              nabl-def(
                ?c-uri1__
              , ?s-uri1__
              | lang__
              , ctx__
              , uniques__
              , uri__
              , uri__
              , NablNsTypedef()
              , Unique()
              , Current()
              , [NablNsBitfield()]
              , []
              )
            )
          |
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?Bitfields(Identifier(name), _, size)
    ; (where(id)
       ; Bitfields(
           Identifier(
             nabl-store-props(
             | ctx__
             , [ Prop(
                   Type()
                 , Bitfields(name, size)
                 , []
                 )
               ]
             )
           )
         , id
         , id
         ))
    ; fail

  nabl-get-name :
    Bitfield(Identifier(name), size, range) -> name

  nabl-name-apply(s) =
    Bitfield(Identifier(s), id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?Bitfield(Identifier(name), size, range)
    ; origin-track-forced(
        Bitfield(
          origin-track-forced(
            Identifier(
              nabl-def(
                ?c-uri1__
              , ?s-uri1__
              | lang__
              , ctx__
              , uniques__
              , uri__
              , uri__
              , NablNsBitfield()
              , Unique()
              , Current()
              , []
              , []
              )
            )
          |
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?Bitfield(Identifier(name), size, range)
    ; (where(id)
       ; Bitfield(
           Identifier(
             nabl-store-props(
             | ctx__
             , [ Prop(NablProp_bitfield-range(), range, [])
               , Prop(NablProp_bitfield-size(), size, [])
               , Prop(Type(), UInt32(), [])
               ]
             )
           )
         , id
         , id
         ))
    ; fail