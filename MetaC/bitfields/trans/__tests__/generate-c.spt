module generate-c

language Metac

start symbol Program

test the bitfields declarations should be removed [[
  bitfields X {
    a: 2;
    b: 6;
  };
]] build generate-c to ""

test bitfield variable declaration [[
  bitfields X { a : 1; };
  void main() {
    X a;
  }
]] build generate-c to "void main() {
  unsigned char a = 0;
}"

test bitfield variable declaration [[
  bitfields X { a : 1; };
  void main() { X a; }
]] build generate-c to "void main() { unsigned char a = 0; }"

test bitfield variable declaration, with more bits, so bigger int type [[
  bitfields X { a : 12; };
  void main() { X a; }
]] build generate-c to "void main() { unsigned short a = 0; }"

test bitfield variable declaration, with 32, so int type [[
  bitfields X { a : 16; b : 16; };
  void main() { X a; }
]] build generate-c to "
  void main() { unsigned int a = 0; }"

test bitfield variable with initializer [[
  bitfields X { a : 16; b : 16; };
  void main() { X a = 15U; }
]] build generate-c to "
  void main() { unsigned char a = 15U; }"

test bitfield variable with initializer, pointer to another variable [[
  bitfields X { a : 16; b : 16; };
  void main() { uint32 a = 31; X *b = &a; }
]] build generate-c to "
  void main() {
    unsigned int a = 31;
    unsigned int *b = &a;
  }"

test set most right bit [[
  bitfields X { a : 7; b : 1; };
  void main() {
    X a;
    a.b = 1;
  }
]] build generate-c to "
  void main () {
    unsigned char a = 0;
    a = (a & ~(0x1 << 0) & 0xFF) | ((1 & 0x1) << 0);
  }"

test setting some bits [[
  bitfields X { a : 3; b : 5; };
  void main() {
    X a;
    a.a = 4;
  }
]] build generate-c to "
  void main () {
    unsigned char a = 0;
    a = (a & ~(0x7 << 5) & 0xFF) | ((4 & 0x7) << 5);
  }"

test getting some bit [[
  bitfields X { a : 1; b : 2; c : 5; };
  void main() {
    X a;
    a.a + a.c;
  }
]] build generate-c to "
  void main () {
    unsigned char a = 0;
    (a >> 7 & 0x1) + (a >> 0 & 0x1F);
  }"

