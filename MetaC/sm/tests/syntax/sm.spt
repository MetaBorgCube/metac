module sm

language Metac

start symbol Program

test parse empty sm [[
  statemachine Name {
    init -> start;
    state start {
    }
  }
]] parse to Program(_, [
    StateMachine(
      Identifier("Name"),
      Identifier("start"),
      [],
      [State(Identifier("start"), [])]
    )
  ])

test statemachine with a local variable decl [[
  statemachine Name {
    init -> start ;
    int32 x;
    state start {
    }
  }
]] parse to Program(_, [StateMachine(
    _,
    _,
    [Declaration([Int32], [Declarator(None, Decl(Identifier("x")))])],
    [_]
  )])

test statemachine with an epsilon transition [[
  statemachine Name {
    init -> start;
    state start {
      on -> finish;
    }
    state finish {}
  }
]] parse to Program(_, [StateMachine(_, _, [],
    [
      State(Identifier("start"), [
        Transition(None(), None(), None(), Identifier("finish"))
      ]),
      State(Identifier("finish"), [])
    ]
  )])


test statemachine with an epsilon transition with guard [[
  statemachine Name {
    init -> start;
    state start {
      on [1 < 3] -> finish;
    }
    state finish {}
  }
]] parse to Program(_, [StateMachine(_, _, [],
    [
      State(Identifier("start"), [
        Transition(None(), Guard(Lt(_, _)), None(), Identifier("finish"))
      ]),
      State(Identifier("finish"), [])
    ]
  )])

test statemachine with an epsilon transition with effect [[
  statemachine Name {
    init -> start;
    state start {
      on / printf("x"); -> finish;
    }
    state finish {}
  }
]] parse to Program(_, [StateMachine(_, _, [],
    [
      State(Identifier("start"), [
        Transition(None(), None, Effect(ExpressionStatement(_)), Identifier("finish"))
      ]),
      State(Identifier("finish"), [])
    ]
  )])

test statemachine with transition [[
  statemachine Name {
    init -> start;
    state start {
      on foo(int32 a, int32 b) -> finish;
      on bar() -> finish;
    }
    state finish {}
  }
]] parse to Program(_, [StateMachine(_, _, [],
    [
      State(Identifier("start"), [
        Transition(Event(
          Identifier("foo"),
          ParameterList([
            Parameter([Int32], Declarator(None, Decl(Identifier("a")))),
            Parameter([Int32], Declarator(None, Decl(Identifier("b"))))
          ])
        ), None, None, Identifier("finish")),
        Transition(Event(Identifier("bar"), ParameterList([])), None, None, Identifier("finish"))
      ]),
      State(Identifier("finish"), [])
    ]
  )])
