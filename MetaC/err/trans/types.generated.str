module MetaC/err/trans/types.generated


imports

  include/-
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-
  BaseC/trans/types/-
  BaseC/trans/desugar/-
  MetaC/err/trans/-
  
signature constructors
  
  
  
rules // functions 
  

rules // relations
  

rules // rules
  
  nabl-constraint(|ctx) :
    d@ErrVarDeclaration(_, _, Call(fn, params)) -> <fail>
    where 
      x386 := <type-task(|ctx)> fn;
      it42 := <new-task(|ctx)> Rewrite("proj70", x386); task-create-id(|ctx, [x386]);
      x387 := <type-task(|ctx)> fn;
      it43 := <new-task(|ctx)> Rewrite("proj71", x387); task-create-id(|ctx, [x387]);
      or274 := <type-is(|ctx)> <task-create-choice(|ctx)> [it42, it43];
      it := <type-is(|ctx); task-create-id(|ctx, [or274])> <task-create-choice(|ctx)> [it42, it43];
      t := <type-lookup(|ctx); task-create-id(|ctx, [it])> d;
      relmatch373 := <relation-create-match(|ctx); task-create-id(|ctx, [t])> ("<is-assignable:", t, it);
      <task-create-error-on-failure(|ctx, relmatch373, ["Incompatible types when initializing type ", t, " using type ", it])> fn
  

rules // projections
  
  task-rewrite :
    ("proj71", FunType(it43)) -> it43
  
  task-rewrite :
    ("proj70", FunType(ErrMaybeError(Type(_, it42), _, _))) -> it42
  
