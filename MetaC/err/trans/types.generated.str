module MetaC/err/trans/types.generated


imports

  include/-
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-
  BaseC/trans/types/-
  BaseC/trans/desugar/-
  MetaC/err/trans/-
  
signature constructors
  
  
  
rules // functions 
  

rules // relations
  

rules // rules
  
  nabl-constraint(|ctx) :
    d@ErrVarDeclaration(_, _, Call(fn, params)) -> <fail>
    where 
      x35 := <type-task(|ctx)> fn;
      it2 := <new-task(|ctx)> Rewrite("proj4", x35); task-create-id(|ctx, [x35]);
      x36 := <type-task(|ctx)> fn;
      it3 := <new-task(|ctx)> Rewrite("proj5", x36); task-create-id(|ctx, [x36]);
      or24 := <type-is(|ctx)> <task-create-choice(|ctx)> [it2, it3];
      it := <type-is(|ctx); task-create-id(|ctx, [or24])> <task-create-choice(|ctx)> [it2, it3];
      t := <type-lookup(|ctx); task-create-id(|ctx, [it])> d;
      relmatch33 := <relation-create-match(|ctx); task-create-id(|ctx, [t])> ("<is-assignable:", t, it);
      <task-create-error-on-failure(|ctx, relmatch33, ["Incompatible types when initializing type ", t, " using type ", it])> fn
  

rules // projections
  
  task-rewrite :
    ("proj5", FunType(it3)) -> it3
  
  task-rewrite :
    ("proj4", FunType(ErrMaybeError(Type(_, it2), _, _))) -> it2
  
