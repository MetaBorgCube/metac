module MetaC/err/trans/types.generated


imports

  include/-
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-
  BaseC/trans/types/-
  BaseC/trans/desugar/-
  MetaC/err/trans/-
  
signature constructors
  
  
  
rules // functions 
  

rules // relations
  

rules // rules
  
  nabl-constraint(|ctx) :
    d@ErrVarDeclaration(_, _, Call(fn, params)) -> <fail>
    where 
      x453 := <type-task(|ctx)> fn;
      it36 := <new-task(|ctx)> Rewrite("proj110", x453); task-create-id(|ctx, [x453]);
      x454 := <type-task(|ctx)> fn;
      it37 := <new-task(|ctx)> Rewrite("proj111", x454); task-create-id(|ctx, [x454]);
      or399 := <type-is(|ctx)> <task-create-choice(|ctx)> [it36, it37];
      it := <type-is(|ctx); task-create-id(|ctx, [or399])> <task-create-choice(|ctx)> [it36, it37];
      t := <type-lookup(|ctx); task-create-id(|ctx, [it])> d;
      relmatch543 := <relation-create-match(|ctx); task-create-id(|ctx, [t])> ("<is-assignable:", t, it);
      <task-create-error-on-failure(|ctx, relmatch543, ["Incompatible types when initializing type ", t, " using type ", it])> fn
  

rules // projections
  
  task-rewrite :
    ("proj111", FunType(it37)) -> it37
  
  task-rewrite :
    ("proj110", FunType(ErrMaybeError(Type(_, it36), _, _))) -> it36
  
