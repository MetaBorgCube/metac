module generate-c

language metac

start symbol Program

test a function that returns a MaybeError should generate a struct and prepend that as first argument [[
  MaybeError<const float64> f() {}
]] build generate-c to "
  typedef struct  {
    unsigned char success;
    union {
      const double value;
    } result;
  } __MaybeError_f;
  unsigned char f (__MaybeError_f *__maybeErrorReturn_f) {}"

test a function that returns a MaybeError containing a pointer [[
  MaybeError<const float64 **> f() {}
]] build generate-c to "
  typedef struct  {
    unsigned char success;
    union {
      const double ** value;
    } result;
  } __MaybeError_f;
  unsigned char f (__MaybeError_f *__maybeErrorReturn_f) {}"

test a function that returns a MaybeError with an error type [[
  MaybeError<uint8, const float64 **> f() {}
]] build generate-c to "
  typedef struct  {
    unsigned char success;
    union {
      unsigned char value;
      const double ** error;
    } result;
  } __MaybeError_f;
  unsigned char f (__MaybeError_f *__maybeErrorReturn_f) {}"

test a function that returns Error() should return success, and set success to false [[
  MaybeError<const float64> f() {
    return Error();
  }
]] build generate-c to "
  typedef struct  {
    unsigned char success;
    union {
      const double value;
    } result;
  } __MaybeError_f;
  unsigned char f (__MaybeError_f *__maybeErrorReturn_f) {
    return __maybeErrorReturn_f->success = 0;
  }"

test a function that returns void should return success, and set value to void [[
  MaybeError<void> f() {
    return;
  }
]] build generate-c to "
  typedef struct  {
    unsigned char success;
    union {
      void value;
    } result;
  } __MaybeError_f;
  unsigned char f (__MaybeError_f *__maybeErrorReturn_f) {
    return (__maybeErrorReturn_f->result.value = (void) 0, __maybeErrorReturn_f->success = 1);
  }"

test a function that returns some value should return success, and set value to the returned value [[
  MaybeError<int32> f() {
    return 1 + 2;
  }
]] build generate-c to "
  typedef struct  {
    unsigned char success;
    union {
      signed int value;
    } result;
  } __MaybeError_f;
  unsigned char f (__MaybeError_f *__maybeErrorReturn_f) {
    return (__maybeErrorReturn_f->result.value = 1 + 2, __maybeErrorReturn_f->success = 1);
  }"

test a function that returns some error value should return failure [[
  MaybeError<int32,uint8> f() {
    return Error(1 + 2);
  }
]] build generate-c to "
  typedef struct  {
    unsigned char success;
    union {
      signed int value;
      unsigned char error;
    } result;
  } __MaybeError_f;
  unsigned char f (__MaybeError_f *__maybeErrorReturn_f) {
    return (__maybeErrorReturn_f->result.error = 1 + 2, __maybeErrorReturn_f->success = 0);
  }"


test un-desugar normal function calls [[
  void f() {}
  int * g() {}
  const int ** h() {}
  void k() {
    attempt[none] {
      void a = f();
      volatile void b = f();
      int * c = g();
      const int **d = h();
    } fail {}
  }
]] build generate-c to "
  void f() {}
  signed int * g() {}
  const signed int** h() {}
  void k() {
    {
      void a = f();
      volatile void b = f();
      signed int *c = g();
      const signed int **d = h();
      goto attempt_none_finally;
    }
    attempt_none_fail__: {
      {}
      goto attempt_none_finally;
    }
    attempt_none_finally: {}
  }"

test un-desugar error function unpack call [[
  MaybeError<uint8*> f() {}
  void g() {
    attempt[a] {
      uint8 *a ?= f();
    } fail;
  }
]] build generate-c to "
  typedef struct {
    unsigned char success;
    union {
      unsigned char * value;
    } result;
  } __MaybeError_f;
  unsigned char f (__MaybeError_f *__maybeErrorReturn_f) {}
  void g() {
    {
      __MaybeError_f __maybe_a;
      f(&__maybe_a);
      if (!__maybe_a.success) {
        goto attempt_a_fail__;
      }
      unsigned char *a = __maybe_a.result.value;
      goto attempt_a_finally;
    }
    attempt_a_fail__: {
      ;
      goto attempt_a_finally;
    }
    attempt_a_finally: {}
  }"

test un-desugar error function unpack call [[
  MaybeError<uint8*> f() {}
  void g() {
    attempt[a] {
    } fail {
      31;
    }
  }
]] build generate-c to "
  typedef struct {
    unsigned char success;
    union {
      unsigned char * value;
    } result;
  } __MaybeError_f;
  unsigned char f (__MaybeError_f *__maybeErrorReturn_f) {}
  void g() {
    {
      goto attempt_a_finally;
    }
    attempt_a_fail__: {
      {
        31;
      }
      goto attempt_a_finally;
    }
    attempt_a_finally: {}
  }"

test goto the matching fail block [[
  MaybeError<uint8,int16> f() {}
  void g() {
    attempt[a] {
      uint8 x ?= f();
    } fail (int16 a) {
      a;
    }
  }
]] build generate-c to "
  typedef struct {
    unsigned char success;
    union {
      unsigned char value;
      signed short error;
    } result;
  } __MaybeError_f;
  unsigned char f (__MaybeError_f *__maybeErrorReturn_f) {}
  void g() {
    signed short attempt_a_1_a;
    {
      __MaybeError_f __maybe_x;
      f(&__maybe_x);
      if (!__maybe_x.success) {
        attempt_a_1_a = __maybe_x.result.error;
        goto attempt_a_fail_1;
      }
      unsigned char x = __maybe_x.result.value;
      goto attempt_a_finally;
    }
    attempt_a_fail_1: {
      {
        attempt_a_1_a;
      }
      goto attempt_a_finally;
    }
    attempt_a_finally: {}
  }"
