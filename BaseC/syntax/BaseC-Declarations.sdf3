module BaseC-Declarations

imports

  Common
  BaseC-Constants
  BaseC-Expr
  BaseC-Identifiers
  BaseC-Types
  BaseC-StructOrUnion
  BaseC-Enums

context-free syntax

  Decl.NoInit = Identifier

  // storage-class-specifiers
  StorageClassSpecifierKeyword.Auto =
    <auto>

  StorageClassSpecifierKeyword.Register =
    <register>

  StorageClassSpecifierKeyword.Static   =
    <static>

  StorageClassSpecifierKeyword.Extern   =
    <extern>

  StorageClassSpecifierKeyword.Typedef  =
    <typedef>

  StorageClass =
    StorageClassSpecifierKeyword

  // type-qualifier

  TypeQualifierKeyword.Const =
    <const>

  TypeQualifierKeyword.Volatile =
    <volatile>

  Qualifier =
    TypeQualifierKeyword

  // type-specifier
  TypeSpecifier =
    PureType

  TypeSpecifier =
    StructOrUnionSpecifier

  TypeSpecifier =
    EnumSpecifier

  TypeSpecifier =
    TypeDefName {avoid}


  // declaration-specifiers
  DeclarationSpecifier =
    StorageClass

  DeclarationSpecifier =
    Qualifier

  DeclarationSpecifier.Type =
    TypeSpecifier

  // typedef-name
  TypeDefName.TypedefName = Identifier


  // declaration
  Declaration.Declaration =
    <<DeclarationSpecifier*> <{InitDeclarator ", "}+>;>


  // init-declarator
  InitDeclarator =
    Declarator

  InitDeclarator.InitDeclarator =
    <<Declarator> = <Initializer>>


  // pointer
  Pointer.Pointer =
    <* <Qualifier*> <Pointer?>>


  // declarator
  Declarator.Declarator =
    <<Pointer?> <DirectDeclarator>>


  // direct-declarator
  DirectDeclarator =
    Identifier {avoid}

  DirectDeclarator.ParensDecl =
    <(<Declarator>)>

  DirectDeclarator.ArrayDecl =
    <<DirectDeclarator> [<Constant?>]>

  DirectDeclarator.FuncDecl =
    <<DirectDeclarator> (<ParameterTypeList>)>

  DirectDeclarator.FuncDeclIDs =
    <<DirectDeclarator> (<{Identifier ","}*>)>

  // parameter-type-list
  ParameterTypeList =
    ParameterList

  ParameterTypeList.VarArgs =
    <<ParameterList>, ...>

  // parameter-list
  ParameterList.ParameterList = <<{ParameterDeclaration ","}*>>


  // parameter-declaration
  ParameterDeclaration.Parameter =
    <<DeclarationSpecifier+> <Declarator>>

  ParameterDeclaration.AbstractParameter =
    <<DeclarationSpecifier+> <AbstractDeclarator?>>


  // initializer
  Initializer =
    Expr

  Initializer.BlockInitializer =
    <{}>

  // abstract-declarator
  AbstractDeclarator =
    Pointer

  AbstractDeclarator.Declarator =
    <<Pointer?> <DirectAbstractDeclarator>>


  // direct-abstract-declarator
  DirectAbstractDeclarator.ParensDecl =
    <(<AbstractDeclarator>)>

  DirectAbstractDeclarator.ArrayDecl =
    <<DirectAbstractDeclarator?> [<Constant?>]>

  DirectAbstractDeclarator.FuncDecl =
    <<DirectAbstractDeclarator?> (<ParameterTypeList?>)>


