module BaseC-Declarations

imports

  Common
  BaseC-Constants
  BaseC-Expr
  BaseC-Identifiers
  BaseC-Types
  BaseC-StructOrUnion
  BaseC-Enums

context-free syntax

  Decl.NoInit = Identifier

  // storage-class-specifiers
  StorageClass.Auto =
    <auto>

  StorageClass.Register =
    <register>

  StorageClass.Static   =
    <static>

  StorageClass.Extern   =
    <extern>

  StorageClass.Typedef  =
    <typedef>


  // type-qualifier
  Qualifier.Const     =
    <const>

  Qualifier.Volatile  =
    <volatile>


  // type-specifier
  TypeSpecifier =
    PureType

  TypeSpecifier =
    StructOrUnionSpecifier

  TypeSpecifier =
    EnumSpecifier

  TypeSpecifier =
    TypeDefName {avoid}


  // declaration-specifiers
  DeclarationSpecifier =
    StorageClass

  DeclarationSpecifier =
    Qualifier

  DeclarationSpecifier =
    TypeSpecifier

  // typedef-name
  TypeDefName = Identifier


  // declaration
  Declaration.Declaration =
    <<DeclarationSpecifier+> <{InitDeclarator ", "}+>;>


  // init-declarator
  InitDeclarator =
    Declarator

  InitDeclarator.InitDeclarator =
    <<Declarator> = <Initializer>>


  // pointer
  Pointer.Pointer =
    <* <Qualifier*> <Pointer?>>


  // declarator
  Declarator.Declarator =
    <<Pointer?> <DirectDeclarator>>


  // direct-declarator
  DirectDeclarator =
    Identifier

  DirectDeclarator.ParensDecl =
    <(<Declarator>)>

  DirectDeclarator.ArrayDecl =
    <<DirectDeclarator> [<Constant?>]>

  DirectDeclarator.FuncDecl =
    <<DirectDeclarator> (<ParameterList?>)> {prefer}

  DirectDeclarator.AbstractFuncDecl =
    <<DirectDeclarator> (<AbstractParameterList?>)>


  // abstract-declarator is a declaration without eventually an identifier,
  // used in parameter lists
  AbstractDeclarator.AbstractDeclarator =
    <<Pointer?> <AbstractDirectDeclarator>>

  AbstractDirectDeclarator.ParensDecl =
    <(<AbstractDeclarator>)>

  AbstractDirectDeclarator.ArrayDecl =
    <<AbstractDirectDeclarator?> [<Constant?>]>

  AbstractDirectDeclarator.FuncDecl =
    <<AbstractDirectDeclarator?> (<AbstractParameterList?>)>


  // parameter-declaration
  Parameter.Parameter =
    <<DeclarationSpecifier+> <Declarator>>


  // parameter-list
  ParameterList.Parameters =
    <<{Parameter ","}+> <VArg?>>


  AbstractParameter.AbstractParameter =
    <<DeclarationSpecifier+> <AbstractDeclarator?>>


  AbstractParameter.Parameter =
    <<DeclarationSpecifier+> <Declarator>> {prefer}


  AbstractParameterList.Parameters =
    <<{AbstractParameter ","}+> <VArg?>>


  VArg.VArg =
    <, ...>


  // initializer
  Initializer =
    Expr

  Initializer.BlockInitializer =
    <{}>
