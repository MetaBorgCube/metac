module names

language Metac

start symbol Program

test typedef name [[
  typedef int32 [[x]];
  [[x]] y;
]] resolve #2 to #1

test variable usage [[
  int32 [[x]] = 1;
  int32 y = [[x]] + 1;
]] resolve #2 to #1

// TODO for some reason, using [[a]] and refers ... to ...
// parses to amb()
test parameter reference [[
  int32 f(int32 a) {
    return a;
  }
]] 0 errors

test double definition of a variable [[
  int32 f() {
    int32 a;
    int32 a;
  }
]] /Duplicate/

test double definition of a parameter [[
  int32 f(int32 a, int32 a) {
  }
]] /Duplicate/

// TODO FIXME
// test double definition of a parameter/declaration [[
//   int32 f(int32 a) {
//     int32 a;
//   }
// ]] /Duplicate/

test compound statement scopes variables [[
  int32 f() {
    int32 [[a]];
    { int32 a; }
    return [[a]];
  }
]] resolve #2 to #1

test parens decl [[
  int32 (*[[a]]);
  int32 *b = [[a]];
]] resolve #2 to #1

test array field decl [[
  int32 [[a]][];
  int32 b[] = [[a]];
]] resolve #2 to #1

test multiple vars [[
  int32 a, b, [[c]];
  int32 d = [[c]];
]] resolve #2 to #1

test define type modifiers [[
  volatile const int32 [[a]];
]] run get-modifiers to Modifiers([Volatile, Const])
