module expr-binexpr

language Metac

start symbol Program

setup before [[
  void main() {
    return
]]

test logical or [[0 || 1]] run get-expr-from-program to
  LogicalOr(Integer("0"), Integer("1"))

test logical or [[0 || 1 || 2]] run get-expr-from-program to
  LogicalOr(LogicalOr(Integer("0"), Integer("1")), Integer("2"))


test logical AND [[0 && 1]] run get-expr-from-program to
  LogicalAnd(Integer("0"), Integer("1"))

test logical AND [[0 && 1 && 2]] run get-expr-from-program to
  LogicalAnd(LogicalAnd(Integer("0"), Integer("1")), Integer("2"))


test bit or [[2 | 1]] run get-expr-from-program to
  InclusiveOr(Integer("2"), Integer("1"))

test bit or multi [[2 | 1 | 0]] run get-expr-from-program to
  InclusiveOr(InclusiveOr(Integer("2"), Integer("1")), Integer("0"))


test bit xor [[2 ^ 1]] run get-expr-from-program to
  ExclusiveOr(Integer("2"), Integer("1"))

test bit xor multi [[2 ^ 1 ^ 0]] run get-expr-from-program to
  ExclusiveOr(ExclusiveOr(Integer("2"), Integer("1")), Integer("0"))


test bit AND [[2 & 1]] run get-expr-from-program to
  InclusiveAnd(Integer("2"), Integer("1"))

test bit AND multi [[2 & 1 & 0]] run get-expr-from-program to
  InclusiveAnd(InclusiveAnd(Integer("2"), Integer("1")), Integer("0"))


test not equal [[2 == 1]] run get-expr-from-program to
  Equal(Integer("2"), Integer("1"))

test not equal multi [[2 == 1 == 0]] run get-expr-from-program to
  Equal(Equal(Integer("2"), Integer("1")), Integer("0"))


test inequal [[2 != 1]] run get-expr-from-program to
  InEqual(Integer("2"), Integer("1"))

test inequal multi [[2 != 1 != 0]] run get-expr-from-program to
  InEqual(InEqual(Integer("2"), Integer("1")), Integer("0"))


test lt [[2 < 1]] run get-expr-from-program to
  Lt(Integer("2"), Integer("1"))

test lt multi [[2 < 1 < 0]] run get-expr-from-program to
  Lt(Lt(Integer("2"), Integer("1")), Integer("0"))


test gt [[2 > 1]] run get-expr-from-program to
  Gt(Integer("2"), Integer("1"))

test gt multi [[2 > 1 > 0]] run get-expr-from-program to
  Gt(Gt(Integer("2"), Integer("1")), Integer("0"))


test lte [[2 <= 1]] run get-expr-from-program to
  Lte(Integer("2"), Integer("1"))

test lte multi [[2 <= 1 <= 0]] run get-expr-from-program to
  Lte(Lte(Integer("2"), Integer("1")), Integer("0"))


test gte [[2 >= 1]] run get-expr-from-program to
  Gte(Integer("2"), Integer("1"))

test gte multi [[2 >= 1 >= 0]] run get-expr-from-program to
  Gte(Gte(Integer("2"), Integer("1")), Integer("0"))


test shift left [[2 << 1]] run get-expr-from-program to
  ShiftLeft(Integer("2"), Integer("1"))

test shift left multi [[2 << 1 << 0]] run get-expr-from-program to
  ShiftLeft(ShiftLeft(Integer("2"), Integer("1")), Integer("0"))


test shift right [[2 >> 1]] run get-expr-from-program to
  ShiftRight(Integer("2"), Integer("1"))

test shift right multi [[2 >> 1 >> 0]] run get-expr-from-program to
  ShiftRight(ShiftRight(Integer("2"), Integer("1")), Integer("0"))


test ADD [[0 + 1]] run get-expr-from-program to
  Add(Integer("0"), Integer("1"))

test ADD multi [[0 + 1 + 2]] run get-expr-from-program to
  Add(Add(Integer("0"), Integer("1")), Integer("2"))


test Subtract [[0 - 1]] run get-expr-from-program to
  Subtract(Integer("0"), Integer("1"))

test Subtract multi [[0 - 1 - 2]] run get-expr-from-program to
  Subtract(Subtract(Integer("0"), Integer("1")), Integer("2"))


test Mult [[0 * 1]] run get-expr-from-program to
  Mult(Integer("0"), Integer("1"))

test Mult multi [[0 * 1 * 2]] run get-expr-from-program to
  Mult(Mult(Integer("0"), Integer("1")), Integer("2"))


test Div [[0 / 1]] run get-expr-from-program to
  Div(Integer("0"), Integer("1"))

test Div multi [[0 / 1 / 2]] run get-expr-from-program to
  Div(Div(Integer("0"), Integer("1")), Integer("2"))


test Mod [[0 % 1]] run get-expr-from-program to
  Mod(Integer("0"), Integer("1"))

test Mod multi [[0 % 1 % 2]] run get-expr-from-program to
  Mod(Mod(Integer("0"), Integer("1")), Integer("2"))



setup after [[
    ;
  }
]]