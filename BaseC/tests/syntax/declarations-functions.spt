module declarations
language metac

start symbol Program

test function declaration [[
  void a();
]] run get-decl-from-program to
  Declaration(
    [Type(Void)],
    [Declarator(
      None,
      FuncDecl(
        Identifier("a"),
        ParameterList([])
      )
    )]
  )

test function declaration with one parameter [[
  void a(int32);
]] run get-decl-from-program to
  Declaration(
    [Type(Void)],
    [Declarator(
      None,
      FuncDecl(
        Identifier("a"),
        ParameterList([
          AbstractParameter(_, _)
        ])
      )
    )]
  )

test function declaration with one named parameter [[
  x(a);
]] run get-decl-from-program to
  Declaration(
    [],
    [Declarator(
      None,
      FuncDeclIDs(
        Identifier("x"),
        [Identifier("a")]
      )
    )]
  )

// TODO
test paren decl and fn [[
  typedef int32 x;
  x (a), y(x);
  // const x z(x),(b);
]] parse to Declarations([
    _,
    Declaration(
      [Type(Identifier("x"))],
      [Declarator([
        ParensDecl(Declarator(None, Identifier("a"))),
        FuncDecl(_, _)
      ])]
    ),
    Declaration(
      [Const, Type(Identifier("x"))],
      [Declarator([
        FuncDecl(_, _),
        ParensDecl(_)
      ])]
    )
  ])

test function declaration with one typedef'd parameter [[
  typedef int32 B;
  void a(B);
]] parse to Declarations([
    _,
    Declaration(
      [Type(Void)],
      [Declarator(
        None,
        FuncDecl(
          Identifier("a"),
          ParameterList([
            AbstractParameter([Type(Identifier("B"))], _)
          ])
        )
      )]
    )
  ])

test function declaration one argument [[
  void a(int32 c);
]] run get-decl-from-program to
  Declaration(
    [Type(Void)],
    [Declarator(
      None,
      FuncDecl(
        Identifier("a"),
        ParameterList([
          Parameter([Type(Int32)], Declarator(None, Identifier("c")))
        ])
      )
    )]
  )

test function declaration more arguments [[
  void a(int32 b, const int32 c, int32 *d);
]] run get-decl-from-program to
  Declaration(
    [Type(Void)],
    [Declarator(
      None,
      FuncDecl(
        Identifier("a"),
        ParameterList([
          Parameter([Type(Int32)], Declarator(None, Identifier("b"))),
          Parameter([Const, Type(Int32)], Declarator(None, Identifier("c"))),
          Parameter([Type(Int32)], Declarator(Some(Pointer([], None)), Identifier("d")))
        ])
      )
    )]
  )

test function declaration without parameter names [[
  void a(int32, int32);
]] run get-decl-from-program to Declaration(
  [Type(Void)],
  [Declarator(
    None,
    FuncDecl(
      Identifier("a"),
      ParameterList([
          AbstractParameter([Type(Int32)], None),
          AbstractParameter([Type(Int32)], None)
      ])
    )
  )]
)

test function declaration with mixed parameters [[
  void a(const int32, int32 a, int32);
]] run get-decl-from-program to
  Declaration(
    [Type(Void)],
    [Declarator(
      None,
      FuncDecl(
        Identifier("a"),
        ParameterList([
          AbstractParameter([Const, Type(Int32)], None),
          Parameter([Type(Int32)], Declarator(None, Identifier("a"))),
          AbstractParameter([Type(Int32)], None)
        ])
      )
    )]
  )

test function declaration, complex declarations, without parameter names [[
  void a(const int32, int32 * const []);
]] run get-decl-from-program to Declaration(
  [Type(Void)],
  [Declarator(
    None,
    FuncDecl(
      Identifier("a"),
      ParameterList([
        AbstractParameter([Const, Type(Int32)], None),
        AbstractParameter(
          [Type(Int32)],
          Some(Declarator(
            Some(Pointer([Const], None)),
            ArrayDecl(None, None)
          )
        ))
      ])
    )
  )]
)

test function with any type [[
    typedef int32 B;
    void a(b, const B, C A);
]] parse to
  Declarations([
    _,
    Declaration(
      [Type(Void)],
      [Declarator(
        None,
        FuncDecl(
          Identifier("a"),
          ParameterList([
            Parameter([], Identifier("b")),
            AbstractParameter([Const, Type(Identifier("B"))], None),
            AbstractParameter([Type(Identifier("B"))], None)
          ])
        )
      )]
    )
  ])

test function declaration with varargs [[
  void a(int32 b, int32 const c, ...);
]] run get-decl-from-program to
  Declaration(
    [Type(Void)],
    [Declarator(
      None,
      FuncDecl(
        Identifier("a"),
        VarArgs(ParameterList([
          Parameter(
            [Type(Int32)],
            Declarator(None, Identifier("b"))
          ),
          Parameter(
            [Type(Int32), Const],
            Declarator(None, Identifier("c"))
          )
        ]))
      )
    )]
  )

test function declaration with vararg, directly after comma [[
  void a(int32 b, int32 const c,...);
]] parse succeeds

test function declaration with vararg, directly after comma [[
  void a(int32 b, int32 const c...);
]] parse fails
