module structs

language Metac

start symbol Program

test union declaration [[
  union x;
]] parse to Declarations([
    Declaration([Union(Identifier("x")], [])
  ])

test one element union [[
  union {
    int32 x;
  };
]] parse to Declarations([
    Declaration(
      [Union(None, [
        StructDeclaration(
          [Int32],
          [Declarator(None, Identifier("x"))]
        )
      ])],
      []
    )
  ])

test more elements struct [[
  union {
    int32 x;
    int32 *y;
  };
]] parse to Declarations([
    Declaration(
      [Union(None, [
        StructDeclaration(
          [Int32],
          [Declarator(None, Identifier("x"))]
        ),
        StructDeclaration(
          [Int32],
          [Declarator(Some(Pointer([], None)), Identifier("y"))]
        )
      ])],
      []
    )
  ])

test named union [[
  union X {
    int32 x;
  };
]] parse to Declarations([
    Declaration(
      [Union(Some(Identifier("X")), [_])],
      []
    )
  ])

test typedef'ed named union [[
  typedef union Y {
    int32 x;
  } X;
]] parse to Declarations([
    Declaration(
      [
        Typedef(),
        Union(Some(_), [_])
      ],
      [Declarator(None(), Identifier("X"))]
    )
  ])

