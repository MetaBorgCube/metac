module declarations-functions-2

language Metac

start symbol Program

// TODO fix this

// test function decl with whitespace [[
//   void fn( int32 a , int32 b );
// ]] run get-decl-from-program to
//   Declaration(
//     _,
//     [Declarator(
//       None,
//       FuncDecl(
//         _,
//         ParameterList([
//           Parameter(_, _),
//           Parameter(_, _)
//         ])
//       )
//     )]
//   )

test function with direct decl parameter [[
  typedef int32 a;
  void fn(a b);
]] parse to Program(_, [
    _,
    Declaration(
      [Void],
      [Declarator(
        None,
        FuncDecl(
          Decl(Identifier("fn")),
          ParameterList([
            Parameter(
              [TypedefName(Identifier("a"))],
              Declarator(None(), Decl(Identifier("b")))
            )
          ])
        )
      )]
    )
  ])


test function with complex parameters [[
  typedef uint8 uint8_t;
  typedef uint8 int64_t;
  static const uint8_t  func_5(const union U3  p_6, int64_t  p_7, int64_t  p_8);
]] parse to Program(_, [
    _, _,
    Declaration(
      [Static, Const, TypedefName(Identifier("uint8_t"))],
      [Declarator(
        None,
        FuncDecl(
          Decl(Identifier("func_5")),
          ParameterList([
            Parameter(
              [Const, Union(Identifier("U3"))],
              Declarator(None(), Decl(Identifier("p_6")))
            ),
            Parameter(
              [TypedefName(Identifier("int64_t"))],
              Declarator(None(), Decl(Identifier("p_7")))
            ),
            Parameter(
              [TypedefName(Identifier("int64_t"))],
              Declarator(None(), Decl(Identifier("p_8")))
            )
          ])
        )
      )]
    )
  ])
