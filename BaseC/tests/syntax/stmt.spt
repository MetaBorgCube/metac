module stmt

language metac

start symbol Program

setup before [[
  void main() {
]]

test empty compound[[
  {}
]] run get-stmt-from-program to CompoundStatement([])

test compound with an expression statement [[
  {1;}
]] run get-stmt-from-program to CompoundStatement([
  ExpressionStatement(_)
])

test expression statement empty [[
  ;
]] run get-stmt-from-program to ExpressionStatement(None)

test expression statement [[
  1;
]] run get-stmt-from-program to ExpressionStatement(Some(_))

test labeled statement with label [[
  bar: 1;
]] run get-stmt-from-program to Label(
  Identifier("bar"),
  ExpressionStatement(_)
)

test labeled statement with case [[
  case 1: {}
]] run get-stmt-from-program to Case(
  Integer("1"),
  CompoundStatement([])
)

test labeled statement with default [[
  default: {}
]] run get-stmt-from-program to Default(
  CompoundStatement([])
)

test if select statement [[
  if (1) {}
]] run get-stmt-from-program to If(
  Constant(_),
  CompoundStatement([])
)

test if-else select statement [[
  if (1) {} else ;
]] run get-stmt-from-program to IfElse(
  Constant(_),
  CompoundStatement([]),
  ExpressionStatement(None)
)

test switch select statement [[
  switch (1) {}
]] run get-stmt-from-program to Switch(
  Constant(_),
  CompoundStatement([])
)

test while iteration statement [[
  while (1) {}
]] run get-stmt-from-program to While(
  Constant(_),
  CompoundStatement([])
)

test do iteration statement [[
  do {} while (1);
]] run get-stmt-from-program to Do(
  CompoundStatement([]),
  Constant(_)
)

test do iteration statement ; [[do {} while (1) ;]] parse succeeds

test for iteration statement [[
  for (;;) {}
]] run get-stmt-from-program to For(
  None, None, None,
  CompoundStatement([])
)

test for iteration statement [[
  for (1; 1; 1) {}
]] run get-stmt-from-program to For(
  Some(_), Some(_), Some(_),
  CompoundStatement([])
)

test goto jump statement [[
  goto a;
]] run get-stmt-from-program to Goto(
  Identifier("a")
)

test continue statement [[
  continue;
]] run get-stmt-from-program to Continue

test break statement [[
  break;
]] run get-stmt-from-program to Break

test return statement without expr[[
  return;
]] run get-stmt-from-program to Return(None)

test return statement with expr[[
  return 1;
]] run get-stmt-from-program to Return(Some(_))

setup footer [[
  }
]]
