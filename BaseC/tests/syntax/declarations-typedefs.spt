module declarations

language Metac

start symbol Program

test typedef [[
  typedef int32 a;
]] run get-decl-from-program to Declaration(
    [Typedef, Int32],
    [Declarator(
      None,
      Decl(Identifier("a"))
    )]
  )

test a typedefed decl [[
  typedef int32 a;
  a b, c;
]] parse to Declarations([
      _,
      Declaration(
      [TypedefName(Identifier("a"))],
      [
        Declarator(None, Decl(Identifier("b"))),
        Declarator(None, Decl(Identifier("c")))
      ]
    )
  ])

test a typedefed pointer decl [[
  typedef int32 * const a;
]] run get-decl-from-program to Declaration(
    [Typedef, Int32],
    [Declarator(
      Some(Pointer([Const], None)),
      Decl(Identifier("a"))
    )]
  )
