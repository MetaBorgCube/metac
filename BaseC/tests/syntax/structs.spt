module structs

language Metac

start symbol Program

test struct declaration [[
  struct x;
]] parse to Program(_, [
    Declaration(
      [Struct(Identifier("x"))],
      _
    )
  ])

test one element struct [[
  struct {
    int32 x;
  };
]] parse to Program(_, [
    Declaration(
      [Struct(None, [
        StructDeclaration(
          [Int32],
          [Declarator(None, Decl(Identifier("x")))]
        )
      ])],
      _
    )
  ])

test more elements struct [[
  struct {
    int32 x;
    int32 *y;
  };
]] parse to Program(_, [
    Declaration(
      [Struct(None, [
        StructDeclaration(
          [Int32],
          [Declarator(None, Decl(Identifier("x")))]
        ),
        StructDeclaration(
          [Int32],
          [Declarator(Some(Pointer([], None)), Decl(Identifier("y")))]
        )
      ])],
      []
    )
  ])

test named struct [[
  struct X {
    int32 x;
  };
]] parse to Program(_, [
    Declaration(
      [Struct(Some(Identifier("X")), [_])],
      []
    )
  ])

test typedef'ed named struct [[
  typedef struct Y {
    int32 x;
  } X;
]] parse to Program(_, [
    Declaration(
      [
        Typedef(),
        Struct(Some(_), [_])
      ],
      [Declarator(None(), Decl(Identifier("X")))]
    )
  ])


test custom type declarator [[
  typedef int32 x;
  struct X {
    const x y;
  };
]] parse to Program(_, [
    _,
    Declaration([
      Struct(Some(Identifier("X")), [
        StructDeclaration(
          [Const(), TypedefName(Identifier("x"))],
          [Declarator(None, Decl(Identifier("y")))]
        )
      ])
    ], _)
  ])

test multiple declarators [[
  typedef int32 z;
  struct X {
    const x y, z;
  };
]] parse to Program(_, [
    _,
    Declaration([
      Struct(Some(Identifier("X")), [
        StructDeclaration(
          [Const(), TypedefName(Identifier("x"))],
          [
            Declarator(None, Decl(Identifier("y"))),
            Declarator(None, Decl(Identifier("z")))
          ]
        )
      ])
    ], _)
  ])

test multiple declarators with bit-size [[
  typedef int32 z;
  struct X {
    const x y, z : 3;
  };
]] parse to Program(_, [
    _,
    Declaration([
      Struct(Some(Identifier("X")), [
        StructDeclaration(
          [Const(), TypedefName(Identifier("x"))],
          [
            Declarator(None, Decl(Identifier("y"))),
            StructSizedFieldDeclarator(
              Some(Declarator(None, Decl(Identifier("z")))),
              Integer("3")
            )
          ]
        )
      ])
    ], _)
  ])
