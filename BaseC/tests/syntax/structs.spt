module structs

language Metac

start symbol Program

test struct declaration [[
  struct x;
]] parse to Declarations([
    Declaration(
      [Struct(Identifier("x"))],
      []
    )
  ])

test one element struct [[
  struct {
    int32 x;
  };
]] parse to Declarations([
    Declaration(
      [Struct(None, [
        StructDeclaration(
          [Int32],
          [Declarator(None, Identifier("x"))]
        )
      ])],
      []
    )
  ])

test more elements struct [[
  struct {
    int32 x;
    int32 *y;
  };
]] parse to Declarations([
    Declaration(
      [Struct(None, [
        StructDeclaration(
          [Int32],
          [Declarator(None, Identifier("x"))]
        ),
        StructDeclaration(
          [Int32],
          [Declarator(Some(Pointer([], None)), Identifier("y"))]
        )
      ])],
      []
    )
  ])

test named struct [[
  struct X {
    int32 x;
  };
]] parse to Declarations([
    Declaration(
      [Struct(Some(Identifier("X")), [_])],
      []
    )
  ])

test typedef'ed named struct [[
  typedef struct Y {
    int32 x;
  } X;
]] parse to Declarations([
    Declaration(
      [
        Typedef(),
        Struct(Some(_), [_])
      ],
      [Declarator(None(), Identifier("X"))]
    )
  ])

