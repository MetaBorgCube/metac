module expr

language metac

start symbol Program

setup before [[
  void main() {
    return
]]


test constant expression [[
  1
]] run get-expr-from-program to Integer("1")

test commas [[
  1, 2
]] run get-expr-from-program to Comma([Integer("1"), Integer("2")])

test parens id [[ (a) ]] run get-expr-from-program to
  Identifier("a")

test parens int [[
  (1)
]] run get-expr-from-program to Integer("1")

test parens neg int [[
  (-1)
]] run get-expr-from-program to Integer("-1")


test assignment expression [[
  a = 1
]] run get-expr-from-program to
  Assign(Identifier("a"), Assign(), Integer("1"))

test conditional expression [[
  a ? b : c
]] run get-expr-from-program to
  Conditional(Integer("1"), Integer("2"), Integer("3"))


test cast [[(int32) 1]] run get-expr-from-program to
  Cast(TypeName([Int32], None), Integer("1"))

test cast pointer [[(int32 *) 1]] run get-expr-from-program to
  Cast(TypeName([Int32], Some(Pointer([], None))), Integer("1"))


test incr pre [[++a]] run get-expr-from-program to
  IncrementPrefix(Identifier("a"))


test decr pre [[--a]] run get-expr-from-program to
  DecrementPrefix(Identifier("a"))


test address [[&a]] run get-expr-from-program to
  Address(Identifier("a"))


test deref [[*a]] run get-expr-from-program to
  Deref(Identifier("a"))


test postive [[ +1 ]] run get-expr-from-program to
  Positive(Integer("1"))


test negative int [[-1]] run get-expr-from-program to
  Integer("-1")

test negative op [[
  -(1)
]] run get-expr-from-program to
  Negative(Integer("1"))


test complement [[ ~3 ]] run get-expr-from-program to
  Complement(Integer("3"))


test negate [[!a]] run get-expr-from-program to
  Negate(Identifier("a"))



test string [[
  "abc"
]] run get-expr-from-program to
  String("\"abc\"")


setup after [[
    ;
  }
]]