module expr

language metac

start symbol Program

setup before [[
  void main() {
    return
]]


test constant expression [[
  1
]] run get-expr-from-program to Integer("1")

test commas [[
  1, 2
]] run get-expr-from-program to Comma([Integer("1"), Integer("2")])

test commas with brackets [[
  (1, 2, 3)
]] run  get-expr-from-program to Comma([
    Integer("1"),
    Integer("2"),
    Integer("3")
  ])

test parens id [[ (a) ]] run get-expr-from-program to
  Identifier("a")

test parens int [[
  (1)
]] run get-expr-from-program to Integer("1")

test parens neg int [[
  (-1)
]] run get-expr-from-program to Integer("-1")

test assignment expression [[
  a = 1
]] run get-expr-from-program to
  Assign(Identifier("a"), Assign(), Integer("1"))

test assignment expression right assoc [[
  a = 1 + 2
]] run get-expr-from-program to
  Assign(Identifier("a"), Assign(), Add(Integer("1"), Integer("2")))

test assignment unary expr [[
  *a = 1
]] run get-expr-from-program to
  Assign(Deref(Identifier("a")), Assign(), Integer("1"))

test assignment to field [[
  a.b = 1
]] run get-expr-from-program to
  Assign(Field(Identifier("a"), Identifier("b")), Assign(), Integer("1"))

test assignment to pointer field [[
  a->b = 1
]] run get-expr-from-program to
  Assign(PointerField(Identifier("a"), Identifier("b")), Assign(), Integer("1"))

test assignment to array [[
  a[b] = 1
]] run get-expr-from-program to
  Assign(ArrayField(Identifier("a"), Identifier("b")), Assign(), Integer("1"))


test conditional expression [[
  a ? b : c
]] run get-expr-from-program to
  Conditional(Identifier("a"), Identifier("b"), Identifier("c"))

test conditional expression with sub-exprs [[
  1 ? 2 + 3 : 4 | 5
]] run get-expr-from-program to
  Conditional(
    Integer("1"),
    Add(Integer("2"), Integer("3")),
    InclusiveOr(Integer("4"), Integer("5"))
  )


test cast [[(int32) 1]] run get-expr-from-program to
  Cast(TypeName([Int32], None), Integer("1"))

test cast pointer [[(int32 *) 1]] run get-expr-from-program to
  Cast(TypeName([Int32], Some(Pointer([], None))), Integer("1"))

test cast assoc [[ (int32) 1 * 2 ]] run get-expr-from-program to
  Mult(Cast(TypeName([Int32], None), Integer("1")), Integer("2"))


test string [[
  "abc"
]] run get-expr-from-program to
  String("\"abc\"")


setup after [[
    ;
  }
]]