module declarations

language Metac

start symbol Program

test simple integer declaration without declarators [[
  int32;
]] run get-decl-from-program to Declaration(
  [Int32],
  []
)

test custom type variable declarator [[
  typedef int32 a;
  a b;
]] run strip-annos to Declarations([
    _,
    Declaration(
      [TypedefName(Identifier("a"))],
      [Declarator(None(), Decl(Identifier("b")))]
    )
  ])

test just a useless declaration [[
  void a;
]] run get-decl-from-program to Declaration(
  [Void], [Declarator(None, Decl(Identifier("a")))]
)

/* Make some errors for this case
test declaration cannot be a keyword [[
  void int32;
]] parse fails
*/

test declaration type/qualifier without declarator [[
  void const;
]] parse succeeds

test declaration type / storage class without declarator [[
  void volatile;
]] parse succeeds


test a single variable declaration [[
  int32 a;
]] run get-decl-from-program to Declaration(
  [Int32],
  [Declarator(None(), Decl(Identifier("a")))]
)

test multiple variable declarations [[
  int32 a, b;
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    Declarator(None(), Decl(Identifier("a"))),
    Declarator(None(), Decl(Identifier("b")))
  ]
)

test multiple variables without spaces [[
  int32 a,b,c;
]] parse to [[
  int32 a, b, c;
]]

test const int [[
  const int32 a;
]] run get-decl-from-program to Declaration(
  [Const, Int32],
  _
)

test int const [[
  int32 const a;
]] run get-decl-from-program to Declaration(
  [Int32, Const],
  _
)

test pointer int [[
  int32 * a;
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    Declarator(
      Some(Pointer([], None)),
      Decl(Identifier("a"))
    )
  ]
)

test two varables of which one is a pointer [[
  int32 a, * b;
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    Declarator(None, _),
    Declarator(Some(_), _)
  ]
)

test variable with init expression [[
  int32 a = 1;
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    InitDeclarator(
      Declarator(_, _),
      _
    )
  ]
)

test two variables with init expressions [[
  int32 a = 1, b = 2;
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    InitDeclarator(
      Declarator(_, _),
      _
    ),
    InitDeclarator(
      Declarator(_, _),
      _
    )
  ]
)

test empty block initializer [[
  int32 a[] = {};
]] run get-decl-from-program to Declaration(
  _,
  [InitDeclarator(_,
    BlockInitializer([])
  )]
)

test block initializer with one expr [[
  int32 a[] = {2 * 3};
]] run get-decl-from-program to Declaration(
  _,
  [InitDeclarator(_,
    BlockInitializer([Mult(_, _)])
  )]
)

test block initializer with more exprs [[
  int32 a[] = {2 * 3, 5, 'a'};
]] run get-decl-from-program to Declaration(
  _,
  [InitDeclarator(_,
    BlockInitializer([Mult(_, _), Integer("5"), Char("'a'")])
  )]
)

test block initializer matrix initializer [[
  int32 a[][] = {{2 * 3}, {4}};
]] run get-decl-from-program to Declaration(
  _,
  [InitDeclarator(_,
    BlockInitializer([
      BlockInitializer([Mult(_, _)]),
      BlockInitializer([Integer(_)])
    ])
  )]
)

test block initializer without spaces [[
  int32 a[] = {1,2,3};
]] parse to [[
  int32 a[] = {
    1,
    2,
    3
  };
]]


test double pointer [[
  int32 ** a;
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    Declarator(
      Some(Pointer([], Some(Pointer([], None)))),
      Decl(Identifier("a"))
    )
  ]
)

test int * const volatile [[
  int32 * const volatile a;
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    Declarator(
      Some(Pointer([Const, Volatile], None)),
      _
    )
  ]
)

test int with storage class [[
  static const extern int32 * a;
]] run get-decl-from-program to Declaration(
  [
    Static,
    Const,
    Extern,
    Int32
  ],
  [
    Declarator(
      Some(Pointer([], None)),
      _
    )
  ]
)

test declaration with parens [[
  int32 (* a);
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    Declarator(
      None,
      ParensDecl(Declarator(
        Some(Pointer([], None)),
        Decl(Identifier("a"))
      ))
    )
  ]
)

test array decl [[
  int32 a[];
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    Declarator(
      None,
      ArrayDecl(
        Decl(Identifier("a")),
        None
      )
    )
  ]
)

test typedef [[
  typedef int32 a;
]] run get-decl-from-program to Declaration(
  [Typedef, Int32],
  [Declarator(
    None,
    Decl(Identifier("a"))
  )]
)

test a typedefed decl [[
  typedef int32 a;
  a b, c;
]] run strip-annos to Declarations([
      _,
      Declaration(
      [TypedefName(Identifier("a"))],
      [
        Declarator(None, Decl(Identifier("b"))),
        Declarator(None, Decl(Identifier("c")))
      ]
    )
  ])

test custom type including base types [[
  int32_t x = 1;
]] parse succeeds

test custom type including storage class specifier [[
  extern_t x = 1;
]] parse succeeds

test custom type including type qualifier [[
  const_t x = 1;
]] parse succeeds
