module declarations

language Metac

start symbol Program

test [[
  int32;
]] run get-decl-from-program to Declaration(
  [Int32],
  []
)

test [[
  a b;
]] run get-decl-from-program to Declaration(
    [TypedefName(Identifier("a"))],
    [Declarator(None(), Identifier("b"))]
  )

test just a useless declaration [[
  void a;
]] run get-decl-from-program to Declaration(
  [Void], [Declarator(None, Identifier("a"))]
)

/* Make some errors for this case
test declaration cannot be a keyword [[
  void int32;
]] parse fails
*/
test declaration type/qualifier without declarator [[
  void const;
]] parse succeeds

test declaration type / storage class without declarator [[
  void volatile;
]] parse succeeds


test a single variable declaration [[
  int32 a;
]] run get-decl-from-program to Declaration(
  [Int32],
  [Declarator(None(), Identifier("a"))]
)

test multiple variable declarations [[
  int32 a, b;
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    Declarator(None(), Identifier("a")),
    Declarator(None(), Identifier("b"))
  ]
)

test const int [[
  const int32 a;
]] run get-decl-from-program to Declaration(
  [Const, Int32],
  _
)

test int const [[
  int32 const a;
]] run get-decl-from-program to Declaration(
  [Int32, Const],
  _
)

test pointer int [[
  int32 * a;
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    Declarator(
      Some(Pointer([], None)),
      Identifier("a")
    )
  ]
)

test two varables of which one is a pointer [[
  int32 a, * b;
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    Declarator(None, _),
    Declarator(Some(_), _)
  ]
)

test variable with init expression [[
  int32 a = 1;
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    InitDeclarator(
      Declarator(_, _),
      _
    )
  ]
)

test two variables with init expressions [[
  int32 a = 1, b = 2;
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    InitDeclarator(
      Declarator(_, _),
      _
    ),
    InitDeclarator(
      Declarator(_, _),
      _
    )
  ]
)

test double pointer [[
  int32 ** a;
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    Declarator(
      Some(Pointer([], Some(Pointer([], None)))),
      Identifier("a")
    )
  ]
)

test int * const volatile [[
  int32 * const volatile a;
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    Declarator(
      Some(Pointer([Const, Volatile], None)),
      _
    )
  ]
)

test int with storage class [[
  static const extern int32 * a;
]] run get-decl-from-program to Declaration(
  [
    Static,
    Const,
    Extern,
    Int32
  ],
  [
    Declarator(
      Some(Pointer([], None)),
      _
    )
  ]
)

test declaration with parens [[
  int32 (* a);
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    Declarator(
      None,
      ParensDecl(Declarator(
        Some(Pointer([], None)),
        Identifier("a")
      ))
    )
  ]
)

test array decl [[
  int32 a[];
]] run get-decl-from-program to Declaration(
  [Int32],
  [
    Declarator(
      None,
      ArrayDecl(
        Identifier("a"),
        None
      )
    )
  ]
)

test typedef [[
  typedef int32 a;
]] run get-decl-from-program to Declaration(
  [Typedef, Int32],
  [Declarator(
    None,
    Identifier("a")
  )]
)

test a typedefed decl [[
  a b, c;
]] run get-decl-from-program to Declaration(
  [TypedefName(Identifier("a"))],
  [
    Declarator(None, Identifier("b")),
    Declarator(None, Identifier("c"))
  ]
)
