module enum

language Metac

start symbol Program

test enum type [[
  enum X x;
]] parse to Declarations([
    Declaration(
      [Enum(Identifier("X"))],
      [_]
    )
  ])

test empty enum fails [[
  enum {};
]] parse fails

test enum with one item [[
  enum {y} x;
]] parse to Declarations([
    Declaration(
      [Enum(
        None,
        [Enumerator(Identifier("y"), None)]
      )],
      [_]
    )
  ])

test enum with a name [[
  enum X {y} x;
]] parse to Declarations([
    Declaration(
      [Enum(
        Some(Identifier("X")),
        [Enumerator(Identifier("y"), None)]
      )],
      [_]
    )
  ])

test enum with more items [[
  enum {x, y, z};
]] parse to Declarations([
    Declaration(
      [Enum(
        None,
        [
          Enumerator(Identifier("x"), None),
          Enumerator(Identifier("y"), None),
          Enumerator(Identifier("z"), None)
        ]
      )],
      []
    )
  ])

test enum with constants [[
  enum {x = 3, y, z = 'a'};
]] parse to Declarations([
    Declaration(
      [Enum(
        None,
        [
          Enumerator(Identifier("x"), Some(EnumInit(Integer("3")))),
          Enumerator(Identifier("y"), None),
          Enumerator(Identifier("z"), Some(EnumInit(Char(_))))
        ]
      )],
      []
    )
  ])
