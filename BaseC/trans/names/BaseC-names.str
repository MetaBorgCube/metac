module BaseC-names

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/relations/-
  lib/runtime/editor/-
  include/Metac
  BaseC/trans/desugar/-


signature
  constructors
    NablNsFunction : Namespace
    NablNsVariable : Namespace
    NablNsTypedef  : Namespace


signature
  constructors
    


rules

  nabl-custom-properties(add-properties) =
    ![] ; add-properties


rules

  nabl-scoping-site =
    ?Declarations(_)
    ; nabl-scope(
      | [NablNsFunction(), NablNsVariable(), NablNsTypedef()]
      )

  nabl-get-scope =
    ?Declarations(_)
    ; ![NablNsFunction(), NablNsVariable(), NablNsTypedef()]

  nabl-get-name :
    TypedefDeclaration(
      type
    , Declarator(_, _)
    , Decl(Identifier(name))
    ) -> name

  nabl-name-apply(s) =
    TypedefDeclaration(
      id
    , Declarator(id, id)
    , Decl(Identifier(s))
    )

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?TypedefDeclaration(
       type
     , Declarator(_, _)
     , Decl(Identifier(name))
     )
    ; origin-track-forced(
        TypedefDeclaration(
          id
        , origin-track-forced(Declarator(id, id)|)
        , origin-track-forced(
            Decl(
              origin-track-forced(
                Identifier(
                  nabl-def(
                    ?c-uri1__
                  , ?s-uri1__
                  | lang__
                  , ctx__
                  , uniques__
                  , uri__
                  , uri__
                  , NablNsTypedef()
                  , Unique()
                  , Current()
                  , []
                  , []
                  )
                )
              |
              )
            )
          |
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    TypedefName(Identifier(name)) -> name

  nabl-name-apply(s) =
    TypedefName(Identifier(s))

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?TypedefName(Identifier(name))
    ; origin-track-forced(
        TypedefName(
          origin-track-forced(
            Identifier(
              nabl-use(
              | lang__
              , ctx__
              , uniques__
              , uris__
              , [ <{:
                     id
                     ; !UseCandidate(
                          NablNsTypedef()
                        , []
                        , Current()
                        , True()
                        , []
                        )
                   }>
                ]
              )
            )
          |
          )
        )
      |
      )

  nabl-get-name :
    VarDeclaration(
      storage
    , types
    , declarator
    , Decl(Identifier(name))
    , _
    ) -> name

  nabl-name-apply(s) =
    VarDeclaration(
      id
    , id
    , id
    , Decl(Identifier(s))
    , id
    )

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?VarDeclaration(
       storage
     , types
     , declarator
     , Decl(Identifier(name))
     , _
     )
    ; origin-track-forced(
        VarDeclaration(
          id
        , id
        , id
        , origin-track-forced(
            Decl(
              origin-track-forced(
                Identifier(
                  nabl-def(
                    ?c-uri1__
                  , ?s-uri1__
                  | lang__
                  , ctx__
                  , uniques__
                  , uri__
                  , uri__
                  , NablNsVariable()
                  , Unique()
                  , Current()
                  , []
                  , []
                  )
                )
              |
              )
            )
          |
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?VarDeclaration(
       storage
     , types
     , declarator
     , Decl(Identifier(name))
     , _
     )
    ; (where(id)
       ; VarDeclaration(
           id
         , id
         , id
         , Decl(
             Identifier(
               nabl-store-props(
               | ctx__
               , [Prop(Type(), types, [])]
               )
             )
           )
         , id
         ))
    ; fail

  nabl-get-name :
    Var(Identifier(name)) -> name

  nabl-name-apply(s) =
    Var(Identifier(s))

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Var(Identifier(name))
    ; origin-track-forced(
        Var(
          origin-track-forced(
            Identifier(
              nabl-use(
              | lang__
              , ctx__
              , uniques__
              , uris__
              , [ <{:
                     id
                     ; !UseCandidate(
                          NablNsVariable()
                        , []
                        , Current()
                        , True()
                        , []
                        )
                   }>
                , <{:
                     id
                     ; !UseCandidate(
                          NablNsFunction()
                        , []
                        , Current()
                        , True()
                        , []
                        )
                   }>
                ]
              )
            )
          |
          )
        )
      |
      )

  nabl-get-name :
    FuncDecl(Identifier(name), _) -> name

  nabl-name-apply(s) =
    FuncDecl(Identifier(s), id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?FuncDecl(Identifier(name), _)
    ; origin-track-forced(
        FuncDecl(
          origin-track-forced(
            Identifier(
              nabl-def(
                ?c-uri1__
              , ?s-uri1__
              | lang__
              , ctx__
              , uniques__
              , uri__
              , uri__
              , NablNsFunction()
              , Unique()
              , Current()
              , []
              , []
              )
            )
          |
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-scope =
    ?FunDefinition(
       Identifier(name)
     , storage
     , types
     , parameters
     , body
     )
    ; ![NablNsVariable(), NablNsTypedef()]

  nabl-get-name :
    FunDefinition(
      Identifier(name)
    , storage
    , types
    , parameters
    , body
    ) -> name

  nabl-name-apply(s) =
    FunDefinition(Identifier(s), id, id, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?FunDefinition(
       Identifier(name)
     , storage
     , types
     , parameters
     , body
     )
    ; origin-track-forced(
        FunDefinition(
          origin-track-forced(
            Identifier(
              nabl-def(
                ?c-uri1__
              , ?s-uri1__
              | lang__
              , ctx__
              , uniques__
              , uri__
              , uri__
              , NablNsFunction()
              , Unique()
              , Current()
              , [NablNsVariable(), NablNsTypedef()]
              , []
              )
            )
          |
          )
        , id
        , id
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    FunDefinitionParameter(types, _, Decl(Identifier(name))) -> name

  nabl-name-apply(s) =
    FunDefinitionParameter(id, id, Decl(Identifier(s)))

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?FunDefinitionParameter(types, _, Decl(Identifier(name)))
    ; origin-track-forced(
        FunDefinitionParameter(
          id
        , id
        , origin-track-forced(
            Decl(
              origin-track-forced(
                Identifier(
                  nabl-def(
                    ?c-uri1__
                  , ?s-uri1__
                  | lang__
                  , ctx__
                  , uniques__
                  , uri__
                  , uri__
                  , NablNsVariable()
                  , Unique()
                  , Current()
                  , []
                  , []
                  )
                )
              |
              )
            )
          |
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?FunDefinitionParameter(types, _, Decl(Identifier(name)))
    ; (where(id)
       ; FunDefinitionParameter(
           id
         , id
         , Decl(
             Identifier(
               nabl-store-props(
               | ctx__
               , [Prop(Type(), types, [])]
               )
             )
           )
         ))
    ; fail

  nabl-scoping-site =
    ?CompoundStatement(_)
    ; nabl-scope(
      | [NablNsVariable(), NablNsTypedef()]
      )

  nabl-get-scope =
    ?CompoundStatement(_)
    ; ![NablNsVariable(), NablNsTypedef()]