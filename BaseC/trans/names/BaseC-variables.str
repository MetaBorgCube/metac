module BaseC-variables

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/relations/-
  lib/runtime/editor/-
  include/Metac
  BaseC/trans/desugar/-
  BaseC/trans/types/-
  BaseC/trans/names/BaseC-functions
  BaseC/trans/names/BaseC-enums


signature
  constructors
    NablNsVariable : Namespace


signature
  constructors
    NablProp_modifiers : Property
    NablProp_storage   : Property


rules

  nabl-custom-properties(add-properties) =
    ![NablProp_modifiers(), NablProp_storage()]
    ; add-properties

  modifiers-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  modifiers-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  modifiers-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_modifiers())

  modifiers-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  modifiers-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  modifiers-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_modifiers(), ctx__, [])

  modifiers-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_modifiers(), ctx__, dep*)

  modifiers-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_modifiers()
    , ctx__
    , Eq()
    , expected
    )

  modifiers-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_modifiers(), ctx__, relation, expected)

  create-modifiers-task(|ctx__) =
    fail

  get-modifiers(|) =
    get-property(|NablProp_modifiers())

  store-modifiers(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_modifiers(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-modifiers-task(|ctx__)> term
    where NablProp_modifiers() := kind

  storage-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  storage-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  storage-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_storage())

  storage-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  storage-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  storage-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_storage(), ctx__, [])

  storage-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_storage(), ctx__, dep*)

  storage-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_storage()
    , ctx__
    , Eq()
    , expected
    )

  storage-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_storage(), ctx__, relation, expected)

  create-storage-task(|ctx__) =
    fail

  get-storage(|) =
    get-property(|NablProp_storage())

  store-storage(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_storage(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-storage-task(|ctx__)> term
    where NablProp_storage() := kind


rules

  nabl-get-name :
    VarDeclaration(
      store
    , Type(mods, type)
    , declarator
    , Decl(Identifier(name))
    , _
    ) -> name

  nabl-name-apply(s) =
    VarDeclaration(
      id
    , Type(id, id)
    , id
    , Decl(Identifier(s))
    , id
    )

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?VarDeclaration(
       store
     , Type(mods, type)
     , declarator
     , Decl(Identifier(name))
     , _
     )
    ; origin-track-forced(
        VarDeclaration(
          id
        , origin-track-forced(Type(id, id)|)
        , id
        , origin-track-forced(
            Decl(
              origin-track-forced(
                Identifier(
                  nabl-def(
                    ?c-uri1__
                  , ?s-uri1__
                  | lang__
                  , ctx__
                  , uniques__
                  , uri__
                  , uri__
                  , NablNsVariable()
                  , Unique()
                  , Current()
                  , []
                  , []
                  )
                )
              |
              )
            )
          |
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?VarDeclaration(
       store
     , Type(mods, type)
     , declarator
     , Decl(Identifier(name))
     , _
     )
    ; (where(id)
       ; VarDeclaration(
           id
         , Type(id, id)
         , id
         , Decl(
             Identifier(
               nabl-store-props(
               | ctx__
               , [ Prop(Type(), type, [])
                 , Prop(NablProp_modifiers(), Modifiers(mods), [])
                 , Prop(NablProp_storage(), Storage(store), [])
                 ]
               )
             )
           )
         , id
         ))
    ; fail

  nabl-get-name :
    FuncDeclaration(
      store
    , Type(mods, type)
    , declarator
    , Decl(Identifier(name))
    , params
    ) -> name

  nabl-name-apply(s) =
    FuncDeclaration(
      id
    , Type(id, id)
    , id
    , Decl(Identifier(s))
    , id
    )

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?FuncDeclaration(
       store
     , Type(mods, type)
     , declarator
     , Decl(Identifier(name))
     , params
     )
    ; origin-track-forced(
        FuncDeclaration(
          id
        , origin-track-forced(Type(id, id)|)
        , id
        , origin-track-forced(
            Decl(
              origin-track-forced(
                Identifier(
                  nabl-def(
                    ?c-uri1__
                  , ?s-uri1__
                  | lang__
                  , ctx__
                  , uniques__
                  , uri__
                  , uri__
                  , NablNsVariable()
                  , Unique()
                  , Current()
                  , []
                  , []
                  )
                )
              |
              )
            )
          |
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?FuncDeclaration(
       store
     , Type(mods, type)
     , declarator
     , Decl(Identifier(name))
     , params
     )
    ; (where(id)
       ; FuncDeclaration(
           id
         , Type(id, id)
         , id
         , Decl(
             Identifier(
               nabl-store-props(
               | ctx__
               , [ Prop(Type(), FunType(type), [])
                 ]
               )
             )
           )
         , id
         ))
    ; fail

  nabl-get-name :
    Var(Identifier(name)) -> name

  nabl-name-apply(s) =
    Var(Identifier(s))

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Var(Identifier(name))
    ; origin-track-forced(
        Var(
          origin-track-forced(
            Identifier(
              nabl-use(
              | lang__
              , ctx__
              , uniques__
              , uris__
              , [ <{:
                     id
                     ; !UseCandidate(
                          NablNsFunction()
                        , []
                        , Current()
                        , True()
                        , []
                        )
                   }>
                , <{:
                     id
                     ; !UseCandidate(
                          NablNsParameter()
                        , []
                        , Current()
                        , True()
                        , []
                        )
                   }>
                , <{:
                     id
                     ; !UseCandidate(
                          NablNsVariable()
                        , []
                        , Current()
                        , True()
                        , []
                        )
                   }>
                , <{:
                     id
                     ; !UseCandidate(
                          NablNsEnumerator()
                        , []
                        , Current()
                        , True()
                        , []
                        )
                   }>
                ]
              )
            )
          |
          )
        )
      |
      )