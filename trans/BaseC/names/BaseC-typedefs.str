module BaseC-typedefs

imports
  runtime/nabl/-
  runtime/task/-
  runtime/properties/-
  runtime/types/-
  runtime/relations/-
  runtime/editor/-
  include/Metac
  BaseC/desugar/-


signature
  constructors
    NablNsTypedef : Namespace


signature
  constructors
    


rules

  nabl-custom-properties(add-properties) =
    ![] ; add-properties


rules

  nabl-get-name :
    TypedefDeclaration(
      Type(mod, type)
    , Declarator(_, _)
    , Decl(Identifier(name))
    ) -> name

  nabl-name-apply(s) =
    TypedefDeclaration(
      Type(id, id)
    , Declarator(id, id)
    , Decl(Identifier(s))
    )

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?TypedefDeclaration(
       Type(mod, type)
     , Declarator(_, _)
     , Decl(Identifier(name))
     )
    ; origin-track-forced(
        TypedefDeclaration(
          origin-track-forced(Type(id, id)|)
        , origin-track-forced(Declarator(id, id)|)
        , origin-track-forced(
            Decl(
              origin-track-forced(
                Identifier(
                  nabl-def(
                    ?c-uri1__
                  , ?s-uri1__
                  | lang__
                  , ctx__
                  , uniques__
                  , uri__
                  , uri__
                  , NablNsTypedef()
                  , Unique()
                  , Current()
                  , []
                  , []
                  )
                )
              |
              )
            )
          |
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?TypedefDeclaration(
       Type(mod, type)
     , Declarator(_, _)
     , Decl(Identifier(name))
     )
    ; (where(id)
       ; TypedefDeclaration(
           Type(id, id)
         , Declarator(id, id)
         , Decl(
             Identifier(
               nabl-store-props(
               | ctx__
               , [Prop(Type(), type, [])]
               )
             )
           )
         ))
    ; fail

  nabl-get-name :
    TypedefName(Identifier(name)) -> name

  nabl-name-apply(s) =
    TypedefName(Identifier(s))

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?TypedefName(Identifier(name))
    ; origin-track-forced(
        TypedefName(
          origin-track-forced(
            Identifier(
              nabl-use(
              | lang__
              , ctx__
              , uniques__
              , uris__
              , [ <{:
                     id
                     ; !UseCandidate(
                          NablNsTypedef()
                        , []
                        , Current()
                        , True()
                        , []
                        )
                   }>
                ]
              )
            )
          |
          )
        )
      |
      )