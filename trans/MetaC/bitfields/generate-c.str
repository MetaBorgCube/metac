module MetaC/bitfieds/generate-c

imports

  include/Metac
  runtime/types/-
  BaseC/desugar/constructors
  MetaC/bitfields/trans
  names/MetaC/bitfields/names
  MetaC/bitfields/desugar
  MetaC/bitfields/util
  lib/bitmask

rules

  // the bitfields declaration is only compiler information, won't be in the
  // C output
  generate: Bitfields(_, _, _) -> []


  // translate instantiations of the bitfields variables
  generate01: VarDeclaration(
      storage,
      Type(mods, t),
      decl,
      declarator,
      init
    ) -> VarDeclaration(
      storage,
      Type(mods, type),
      decl,
      declarator,
      Some(initializer)
    )
    where
      bitfields-type := <gen-get-bitfields-type> t
      ; (initializer, type) := <gen-bitfields> (init, bitfields-type)

  gen-bitfields: (None(), t) -> (
      Integer("0"),
      <?Bitfields(_, <id>)
        ; bitfields-int-size
        ; gen-smallest-int-type> t
    )

  gen-bitfields: (Some(i), _) -> (i, <get-type> i)

  gen-smallest-int-type: 8  -> UInt8()
  gen-smallest-int-type: 16 -> UInt16()
  gen-smallest-int-type: 32 -> UInt32()
  gen-smallest-int-type: 64 -> UInt64()

  gen-get-bitfields-type-internal: t@TypedefName(_) -> <get-type ; gen-get-bitfields-type> t
  gen-get-bitfields-type-internal: b@Bitfields(_, _) -> b
  gen-get-bitfields-type = oncetd(gen-get-bitfields-type-internal ; ?x) ; !x

  // assignments using bitfields
  generate01:
    Assign(
      Field(lvalue, Identifier(field)),
      Assign(),
      value
    ) ->
    Assign(
      lvalue,
      Assign(),
      InclusiveOr(
        Paren(
          InclusiveAnd(
            InclusiveAnd(
              lvalue,
              Complement(Paren(ShiftLeft(field-mask, Integer(<int-to-string> shift))))
            ),
            full-mask
          )
        ),
        Paren(
          ShiftLeft(InclusiveAnd(value, field-mask), Integer(<int-to-string> shift))
        )
      )
    )
    where
      type := <get-type ; ?Bitfields(_, size)> lvalue
      ; BitfieldRange(shift, _) := <get-bitfield-range> field
      ; field-mask := Hexadecimal(<get-bitfield-size ; bitmask> field)
      ; full-mask := Hexadecimal(<!size ; bitfields-int-size ; bitmask> lvalue)

  // field lookups
  generate:
    Field(lvalue, Identifier(field)) -> Paren(InclusiveAnd(
      ShiftRight(lvalue, Integer(<int-to-string> shift)),
      field-mask
    ))
    where
      type := <get-type ; ?Bitfields(_, size)> lvalue
      ; BitfieldRange(shift, _) := <get-bitfield-range> field
      ; field-mask := Hexadecimal(<get-bitfield-size ; bitmask> field)
