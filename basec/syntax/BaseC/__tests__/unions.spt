module unions

language MetaC

test union declaration [[
  union x;
]] parse to Program(_, [
    Declaration(
      [Union(Identifier("x"))],
      []
    )
  ])

test one element union [[
  union {
    int32 x;
  };
]] parse to Program(_, [
    Declaration(
      [Union(None, [
        StructDeclaration(
          [Int32],
          [Declarator(None, Decl(Identifier("x")))]
        )
      ])],
      []
    )
  ])

test more elements struct [[
  union {
    int32 x;
    int32 *y;
  };
]] parse to Program(_, [
    Declaration(
      [Union(None, [
        StructDeclaration(
          [Int32],
          [Declarator(None, Decl(Identifier("x")))]
        ),
        StructDeclaration(
          [Int32],
          [Declarator(Some(Pointer([], None)), Decl(Identifier("y")))]
        )
      ])],
      []
    )
  ])

test named union [[
  union X {
    int32 x;
  };
]] parse to Program(_, [
    Declaration(
      [Union(Some(Identifier("X")), [_])],
      []
    )
  ])

test typedef'ed named union [[
  typedef union Y {
    int32 x;
  } X;
]] parse to Program(_, [
    Declaration(
      [
        Typedef(),
        Union(Some(_), [_])
      ],
      [Declarator(None(), Decl(Identifier("X")))]
    )
  ])
