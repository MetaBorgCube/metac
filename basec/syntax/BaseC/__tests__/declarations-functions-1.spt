module declarations-functions-1

language MetaC

test function declaration [[
  void a();
]] run get-decl-from-program to
  Declaration(
    [Void],
    [Declarator(
      None,
      FuncDecl(
        Decl(Identifier("a")),
        ParameterList([])
      )
    )]
  )

test function declaration with one parameter [[
  void a(int32);
]] run get-decl-from-program to
  Declaration(
    [Void],
    [Declarator(
      None,
      FuncDecl(
        Decl(Identifier("a")),
        ParameterList([
          AbstractParameter(_, _)
        ])
      )
    )]
  )

test function declaration with one named parameter [[
  void x(a);
]] run get-decl-from-program to
  Declaration(
    [Void],
    [Declarator(
      None,
      FuncDeclIDs(
        Decl(Identifier("x")),
        [Identifier("a")]
      )
    )]
  )

test function declaration with more named parameters [[
  void x(a, b);
]] run get-decl-from-program to
  Declaration(
    [Void],
    [Declarator(
      None,
      FuncDeclIDs(
        Decl(Identifier("x")),
        [Identifier("a"), Identifier("b")]
      )
    )]
  )

test function declaration with spaces [[
  void x(a,b,c);
]] parse to [[
  void x ( a, b, c );
]]

test paren decl and fn [[
  typedef int32 x;
  x (a), y (x);
  const x z (x), (b);
]] parse to Program(_, [
    _,
    Declaration(
      [TypedefName(Identifier("x"))],
      [
        Declarator(None, ParensDecl(Declarator(None, Decl(Identifier("a"))))),
        Declarator(None, FuncDecl(_, _))
      ]
    ),
    Declaration(
      [Const, TypedefName(Identifier("x"))],
      [
        Declarator(None, FuncDecl(_, _)),
        Declarator(None, ParensDecl(Declarator(None, Decl(Identifier("b")))))
      ]
    )
  ])

test function declaration with one typedef'd parameter [[
  typedef int32 B;
  void a(B);
]] parse to Program(_, [
    _,
    Declaration(
      [Void],
      [Declarator(
        None,
        FuncDecl(
          Decl(Identifier("a")),
          ParameterList([
            AbstractParameter([TypedefName(Identifier("B"))], _)
          ])
        )
      )]
    )
  ])

test function declaration one argument [[
  void a(int32 c);
]] run get-decl-from-program to
  Declaration(
    [Void],
    [Declarator(
      None,
      FuncDecl(
        Decl(Identifier("a")),
        ParameterList([
          Parameter([Int32], Declarator(None, Decl(Identifier("c"))))
        ])
      )
    )]
  )

test function declaration more arguments [[
  void a(int32 b, const int32 c, int32 *d);
]] run get-decl-from-program to
  Declaration(
    [Void],
    [Declarator(
      None,
      FuncDecl(
        Decl(Identifier("a")),
        ParameterList([
          Parameter([Int32], Declarator(None, Decl(Identifier("b")))),
          Parameter([Const, Int32], Declarator(None, Decl(Identifier("c")))),
          Parameter([Int32], Declarator(Some(Pointer([], None)), Decl(Identifier("d"))))
        ])
      )
    )]
  )

test function declaration without parameter names [[
  void a(int32, int32);
]] run get-decl-from-program to Declaration(
  [Void],
  [Declarator(
    None,
    FuncDecl(
      Decl(Identifier("a")),
      ParameterList([
          AbstractParameter([Int32], None),
          AbstractParameter([Int32], None)
      ])
    )
  )]
)

test function declaration with mixed parameters [[
  void f(const int32, int32 a, int32);
]] run get-decl-from-program to
  Declaration(
    [Void],
    [Declarator(
      None,
      FuncDecl(
        Decl(Identifier("f")),
        ParameterList([
          AbstractParameter([Const, Int32], None),
          Parameter([Int32], Declarator(None, Decl(Identifier("a")))),
          AbstractParameter([Int32], None)
        ])
      )
    )]
  )

test function declaration, complex declarations, without parameter names [[
  void a(const int32, int32 * const []);
]] run get-decl-from-program to Declaration(
  [Void],
  [Declarator(
    None,
    FuncDecl(
      Decl(Identifier("a")),
      ParameterList([
        AbstractParameter([Const, Int32], None),
        AbstractParameter(
          [Int32],
          Some(Declarator(
            Some(Pointer([Const], None)),
            ArrayDecl(None, None)
          )
        ))
      ])
    )
  )]
)

test function with a typedef'ed parameter [[
  typedef int32 a;
  void x(a b, c);
]] parse to
  Program(_, [
    _,
    Declaration(
      [Void],
      [Declarator(
        None,
        FuncDecl(
          Decl(Identifier("x")),
          ParameterList([
            Parameter([TypedefName(Identifier("a"))], Declarator(None, Decl(Identifier("b")))),
            AbstractParameter([TypedefName(Identifier("c"))], None)
          ])
        )
      )]
    )
  ])

test function with any type [[
    typedef int32 B;
    void a(d, const *c, const B, B);
]] parse to
  Program(_, [
    _,
    Declaration(
      [Void],
      [Declarator(
        None,
        FuncDecl(
          Decl(Identifier("a")),
          ParameterList([
            AbstractParameter([TypedefName(Identifier("d"))], None),
            Parameter([Const], Declarator(Some(Pointer([], None)), Decl(Identifier("c")))),
            AbstractParameter([Const, TypedefName(Identifier("B"))], None),
            AbstractParameter([TypedefName(Identifier("B"))], None)
          ])
        )
      )]
    )
  ])

test function declaration with varargs [[
  void a(int32 b, int32 const c, ...);
]] run get-decl-from-program to
  Declaration(
    [Void],
    [Declarator(
      None,
      FuncDecl(
        Decl(Identifier("a")),
        VarArgs(ParameterList([
          Parameter(
            [Int32],
            Declarator(None, Decl(Identifier("b")))
          ),
          Parameter(
            [Int32, Const],
            Declarator(None, Decl(Identifier("c")))
          )
        ]))
      )
    )]
  )

test function declaration with vararg, directly after comma [[
  void a(int32 b, int32 const c,...);
]] parse succeeds

test function declaration with vararg, directly after comma [[
  void a(int32 b, int32 const c...);
]] parse fails

test function declarations with(out) spaces [[
  void a(int32 b,int32 c,const int32 d);
]] parse to [[
  void a (int32 b, int32 c, const int32 d);
]]

test abstract function declarations with(out) spaces [[
  void a(int32,int32,const int32);
]] parse to [[
  void a (int32, int32, const int32);
]]
