module BaseC/desugar/functions

imports

  signatures/BaseC/-
  BaseC/desugar/constructors
  BaseC/desugar/types

rules

  desugar-parameter:
    Parameter(ts, decl@Declarator(ptr, d)) -> FunDefinitionParameter(
      <merge-types> (types, ptr, d),
      <find-decl> decl
    )
    where
      types := <desugar-decl-types> ts

  desugar-parameter:
    AbstractParameter(ts, ptr) -> FunDefinitionParameter(
      <merge-types> (<desugar-decl-types> ts, ptr, None())
    )

  desugar:
    FunDef(
      specifiers,
      decl@FunDeclarator(ptr, name, ParameterList(ps)),
      old-school-declarators,
      body
    ) -> FunDefinition(
      name,
      storage,
      Type([], Function(
        <merge-types> (base-type, ptr, decl),
        ps-types
      )),
      ps,
      body
    )
    where
      base-type := <desugar-decl-types> specifiers
      ; storage := <filter(is-storage-class-specifier)> specifiers
      ; ps-types := <map(\ FunDefinitionParameter(t, _) -> t \)> ps

  desugar:
    ParameterList(ps) -> <map(desugar-parameter)> ps

  // TODO improve this
  desugar: VarArgs(param-list) -> <desugar> param-list
