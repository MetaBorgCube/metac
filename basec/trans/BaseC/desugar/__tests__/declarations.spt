module declarations

language MetaC

test desugar var declaration [[
  static unsigned int x, y = 2;
  float a;
  double b;
]] run strip-annos to Program(_, [
    VarDeclaration(
      [Static()],
      Type([], UInt32()),
      Decl(Identifier("x")),
      None()
    ),
    VarDeclaration(
      [Static()],
      Type([], UInt32()),
      Decl(Identifier("y")),
      Some(Integer("2"))
    ),
    VarDeclaration(_, Type([], Float32()), _, _),
    VarDeclaration(_, Type([], Float64()), _, _)
  ])

test desugar var pointer declaration [[
  uint32 *x;
]] run strip-annos to Program(_, [
    VarDeclaration(
      [],
      Type([], Pointer(UInt32)),
      Decl(Identifier("x")),
      None()
    )
  ])

test desugar var double pointer declaration [[
  uint32 ** const x;
]] run strip-annos to Program(_, [
    VarDeclaration(
      [],
      Type([Const], Pointer(Pointer(UInt32))),
      Decl(Identifier("x")),
      None()
    )
  ])

test desugar typedefs [[
  typedef unsigned const int a, ***b;
]] run strip-annos to Program(_, [
    TypedefDeclaration(
      Type([Const], UInt32),
      Decl(Identifier("a"))
    ),
    TypedefDeclaration(
      Type([Const], Pointer(Pointer(Pointer(UInt32)))),
      Decl(Identifier("b"))
    )
  ])

test enum declaration [[
  enum X {A};
]] run strip-annos to Program(_, [
    _
  ])

test struct declaration [[
  struct X {const unsigned int x;};
]] run strip-annos to Program(_, [
    Declaration(
      [Struct(
        Some(Identifier("X")),
        [
          StructDeclarator(
            Type([Const], UInt32()),
            Declarator(_, _),
            Decl(Identifier("x")),
            None()
          )
        ]
      )],
      []
    )
  ])

test union declaration [[
  union X {volatile unsigned char (*x)(int): 3;};
]] run strip-annos to Program(_, [
    Declaration(
      [Union(
        Some(Identifier("X")),
        [
          StructDeclarator(
            Type([Volatile], Function(UInt8(), [Type([], Int32())])),
            Declarator(_, _),
            Decl(Identifier("x")),
            Some(Integer("3"))
          )
        ]
      )],
      []
    )
  ])

test paren decl [[
  void a(b, c);
]] run strip-annos to Program(_, [
    VarDeclaration(
      [],
      Type([], Function(
        Void(),
        [
          Type([], Int32()),
          Type([], Int32())
        ]
      )),
      Decl(Identifier("a")),
      None()
    )
  ])

test abstract function declarations [[
  void a(int32,int32 *,const int32);
]] run strip-annos to Program(_, [VarDeclaration(
    [],
    Type([], Function(Void(), [
      Type([], Int32()),
      Type([], Pointer(Int32())),
      Type([Const], Int32())
    ])),
    Decl(Identifier("a")),
    None()
  )])

test function declarations [[
  void a(int32 b,int32 * c,const int32 d);
]] run strip-annos to Program(_, [VarDeclaration(
    [],
    Type([], Function(Void(), [
      Type([], Int32()),
      Type([], Pointer(Int32())),
      Type([Const], Int32())
    ])),
    Decl(Identifier("a")),
    None()
  )])

test function declaration [[
  int *a(int, int *, int **b, int c[]);
]] run strip-annos to Program(_, [
    VarDeclaration(
      [],
      Type([], Function(
        Pointer(Int32()),
        [
          Type([], Int32()),
          Type([], Pointer(Int32())),
          Type([], Pointer(Pointer(Int32))),
          Type([], Array(Int32, None()))
        ]
      )),
      Decl(Identifier("a")),
      None()
    )
  ])

test enum declaration [[
  enum X {A};
]] run strip-annos to Program(_, [
    Declaration(
      [Enum(
        Identifier("X"),
        [Enumerator(Identifier("A"), None, Identifier("X"))]
      )],
      []
    )
  ])
