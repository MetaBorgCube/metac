module constants

language MetaC
/*
test is-int8
  <map(to-bool(is-int8))>
    ["5", -5, 127, -127, 128, -128, -129, 400, -400]
  =>
    [1,   1,  1,   1,    0,   1,    0,    0,   0]

test is-unsigned
  <map(to-bool(is-unsigned(id)))> ["2U", 2]
  => [1, 0]

test smallest-int-type
  <map(smallest-int-type)>
    [1, 300, "5U", "31LU"]
  =>
    [Int8(), Int16(), UInt8(), UInt64()]
*/

test 1LLU should be UInt64() [[
  void f() { [[(0,1LLU)]]; }
]] run get-type to UInt64()

test 1ULL should be UInt64() [[
  void f() { [[(0,1ULL)]]; }
]] run get-type to UInt64()

test 1UL should be UInt64() [[
  void f() { [[(0,1UL)]]; }
]] run get-type to UInt64()

test 1LU should be UInt64() [[
  void f() { [[(0,1LU)]]; }
]] run get-type to UInt64()

test 1U should be UInt8() [[
  void f() { [[(0,1U)]]; }
]] run get-type to UInt8()

test 255U should be UInt8 [[
  void f() { [[(0,255U)]]; }
]] run get-type to UInt8()

test 256U should be UInt16, as it doesn't fit in uint8 [[
  void f() { [[(0,256U)]]; }
]] run get-type to UInt16()

test 255 should be Int16 [[
  void f() { [[(0,255)]]; }
]] run get-type to Int16()

test get type of a constant integer [[
  int32 f() { return [[(0,1)]]; }
]] run get-type to Int8()

test get type of a char [[
  uint8 f() { return [[(0,'a')]]; }
]] run get-type to UInt8()

test get type of a char [[
  uint8 * f() { return [[(0,"ab")]]; }
]] run get-type to Array(UInt8(), Some(2))

test get type or bool [[
  uint8 f() { return [[true]]; }
]] run get-type to UInt8()

test get type or bool [[
  uint8 f() { return [[false]]; }
]] run get-type to UInt8()

test get type of float [[
  float f() { return [[(0,1.0)]]; }
]] run get-type to Float32()
