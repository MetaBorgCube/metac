module BaseC/types/typedefs

imports

  include/-
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  runtime/properties/-
  runtime/relations/-
  BaseC/types/-
  BaseC/desugar/-

rules

  get-typedef-base-type: t -> <<get-type-transform ; get-typedef-base-type> t <+ !t>

  get-type-transform: Array(t) -> t
  get-type-transform: Pointer(t) -> t
  get-type-transform: t@TypedefName(_) -> <get-type> t

  create-base-type-task(|ctx) = task-create-rewrite(|ctx, "base-type")
  task-rewrite: ("base-type", t) -> <get-typedef-base-type> t


  create-resolve-typedef-task(|ctx) = task-create-rewrite(|ctx, "resolve-typedef")
  task-rewrite: ("resolve-typedef", t) -> <topdown(repeat(?TypedefName(_) ; get-type ; try(transform-typedef-type)))> t
  transform-typedef-type = fail


  create-rewrite-type-structure-task(|ctx) = task-create-rewrite(|ctx, "type-structure")
  task-rewrite: ("type-structure", t) -> <topdown(try(not(is-type-structure) ; !Int()))> t

  is-type-structure: t@Pointer(_) -> t
  is-type-structure: t@Array(_) -> t

  create-rewrite-type-array-to-pointer(|ctx) = task-create-rewrite(|ctx, "type-array-as-pointer")
  task-rewrite: ("type-array-as-pointer", t) -> <topdown(try(\ Array(t) -> Pointer(t) \))> t

  type-func-resolve-typedefs(|ctx):
    t -> <task-create-id(|ctx, rewrite')> rewrite'
    where
      rewrite' := <create-resolve-typedef-task(|ctx)> t

  create-type-task(|ctx):
    td@TypedefName(x) -> <task-create-id(|ctx, rewrite)> rewrite
    where
      rewrite' := <create-resolve-typedef-task(|ctx)> td
      ; rewrite := <type-is(|ctx)> rewrite'
