module BaseC/types/Constants

imports

  signatures/BaseC/-
  BaseC/desugar/constructors
  BaseC/types/Constructors
  runtime/types/-
  metac-runtime-utils/in-range
  metac-runtime-utils/string

rules

  create-type-task(|ctx):
    Integer(<id>) -> <smallest-int-type ; type-is(|ctx, [])>

  create-type-task(|ctx):
    Octal(<id>) -> <explode-string ; oct-chars-to-int ; smallest-int-type ; type-is(|ctx, [])>

  create-type-task(|ctx):
    Hexadecimal(<id>) -> <
      explode-string
      ; drop(|2)
      ; hex-chars-to-int
      ; smallest-int-type
      ; type-is(|ctx, [])>

  create-type-task(|ctx):
    Float(<id>) -> <type-is(|ctx)> Float32()

  create-type-task(|ctx):
    Char(_) -> <type-is(|ctx)> UInt8()

  create-type-task(|ctx):
    True() -> <type-is(|ctx)> UInt8()

  create-type-task(|ctx):
    False() -> <type-is(|ctx)> UInt8()

  create-type-task(|ctx):
    Null() -> <type-is(|ctx)> Null()

  // subtract 2 from the string length, which are the opening/closing quotes "
  create-type-task(|ctx):
    String(s) -> <type-is(|ctx)> Array(UInt8(), Some(<subt> (<string-length> s, 2)))

  str-in-range(|min, max): strVal ->
    <try(string-to-int) ; in-range(|min, max)> strVal

  is-int8 = str-in-range(|-128, 127); !Int8()
  is-int16 = str-in-range(|-32768, 32767); !Int16()
  is-int32 = str-in-range(|-2147483648, 2147483647); !Int32()
  is-int64 = !Int64()

  is-unsigned(s) =
    string-ends-with(|"U")
    ; string-drop-last(|1)
    ; s

  is-uint8 = str-in-range(|0, 255); !UInt8()
  is-uint16 = str-in-range(|0, 65535); !UInt16()
  is-uint32 = str-in-range(|0, 4294967295); !UInt32()
  is-uint64 =
    (
      string-ends-with(|"LLU")
      <+ string-ends-with(|"ULL")
      <+ string-ends-with(|"LU")
      <+ string-ends-with(|"UL")
    )
    ; !UInt64()

  smallest-int-type =
    is-uint64
    <+ is-unsigned(
        is-uint8
        <+ is-uint16
        <+ is-uint32
      )
    <+ is-int8
    <+ is-int16
    <+ is-int32
    <+ is-int64
