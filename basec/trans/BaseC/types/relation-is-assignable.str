module BaseC/types/relation-is-assignable

imports

  include/-
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  runtime/properties/-
  runtime/relations/-
  BaseC/desugar/-
  BaseC/types/-
  BaseC/utils/-

rules

  // Assignments type checking

  relation-match-custom(|ctx):
    ("<is-assignable:", from, to) -> or2
    where
      // base types, like Int8
      from-base := <create-base-type-task(|ctx)> from;
      to-base := <create-base-type-task(|ctx)> to;

      // resolve all typedefs, so Array(Typedef(){(Type, Pointer(UInt32))})
      // becomes Array(Pointer(UInt32))
      from-resolved := <create-resolve-typedef-task(|ctx)> from;
      to-resolved := <create-resolve-typedef-task(|ctx)> to;

      // transform the leaf of the structure into Int(), so irregardless of
      // the base type, we can compare the same structure
      from-structure := <create-rewrite-type-structure-task(|ctx)> from-resolved;
      to-structure := <create-rewrite-type-structure-task(|ctx)> to-resolved;

      // basically Array(t) is the same as Pointer(t), so rewrite Array(t) to Pointer(t)
      // that means, you can assign an array to a pointer
      from-array-structure := <create-rewrite-type-array-to-pointer(|ctx)> from-structure;

      // are they equal?
      eq-base := <type-match(|ctx, to-base)> from-base;
      eq-structure' := <type-match(|ctx, to-structure)> from-structure;
      eq-array-structure := <type-match(|ctx, to-structure)> from-array-structure;
      eq-structure := <task-create-choice(|ctx)> [eq-structure', eq-array-structure];

      // are both numeric
      from-numeric := <relation-create-match(|ctx)> ("<is:", from-base, Numeric());
      to-numeric := <relation-create-match(|ctx); task-create-id(|ctx, [from-numeric])> ("<is:", to-base, Numeric());

      // is null
      from-is-null := <type-match(|ctx, Null())> from;

      // is either numeric or the same
      or := <type-is(|ctx)> <task-create-choice(|ctx)> [eq-base, to-numeric];
      // and have the same structure
      and := <task-create-id(|ctx, [eq-structure, or])> to;
      or2 := <type-is(|ctx)> <task-create-choice(|ctx)> [from-is-null, and]
