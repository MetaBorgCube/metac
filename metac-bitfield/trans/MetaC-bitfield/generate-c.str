module MetaC-bitfield/generate-c

imports

  signatures/BaseC/-
  runtime/types/-
  BaseC/desugar/constructors
  MetaC-bitfield/trans
  names/MetaC-bitfield/names
  MetaC-bitfield/desugar
  MetaC-bitfield/utils
  metac-runtime-utils/bitmask

rules

  // the bitfields declaration is only compiler information, won't be in the
  // C output
  generate: Bitfields(_, _, _) -> []


  // translate instantiations of the bitfields variables
  generate01: VarDeclaration(
      storage,
      Type(mods, t),
      declarator,
      init
    ) -> VarDeclaration(
      storage,
      Type(mods, init-type),
      declarator,
      Some(initializer)
    )
    where
      type' := <gen-get-bitfields-type> t
      ; (initializer, init-type) := <gen-bitfields> (init, type')

  gen-bitfields: (None(), t) -> (
      Integer("0"),
      <topdown(try(
        ?Bitfields(_, <id>)
        ; bitfields-int-size
        ; gen-smallest-int-type
      ))> t
    )

  gen-bitfields: (Some(i), t) -> (i, <get-type> i)
    where <not(oncetd(?x@Bitfields(_, _)))> t

  gen-bitfields: (Some(i), t) -> (i, type)
    where (_, type) := <gen-bitfields> (None(), t)

  gen-smallest-int-type: 8  -> UInt8()
  gen-smallest-int-type: 16 -> UInt16()
  gen-smallest-int-type: 32 -> UInt32()
  gen-smallest-int-type: 64 -> UInt64()

  gen-get-bitfields-type-internal: t@TypedefName(_) -> <get-type ; gen-get-bitfields-type> t
  gen-get-bitfields-type-internal: b@Bitfields(_, _) -> b
  gen-get-bitfields-type = topdown(try(gen-get-bitfields-type-internal))

  // desugar pointer fields for generation
  generate01:
    PointerField(lvalue, field) -> Field(Paren(Deref(lvalue)){(Type(), bitfield-type)}, field)
    where
      type := <get-type ; ?Pointer(bitfield-type@Bitfields(_, _))> lvalue

  // assignments using bitfields
  generate02:
    Assign(
      Field(lvalue, Identifier(field)),
      Assign(),
      value
    ) ->
    Assign(
      lvalue,
      Assign(),
      InclusiveOr(
        Paren(
          InclusiveAnd(
            InclusiveAnd(
              lvalue,
              Complement(Paren(ShiftLeft(field-mask, Integer(<int-to-string> shift))))
            ),
            full-mask
          )
        ),
        Paren(
          ShiftLeft(
            Paren(
              InclusiveAnd(value, field-mask)
            ),
            Integer(<int-to-string> shift)
          )
        )
      )
    )
    where
      type := <get-type ; ?Bitfields(_, size)> lvalue
      ; BitfieldRange(shift, _) := <get-bitfield-range> field
      ; field-mask := Hexadecimal(<get-bitfield-size ; bitmask> field)
      ; full-mask := Hexadecimal(<!size ; bitfields-int-size ; bitmask> lvalue)

  // field lookups
  generate:
    Field(lvalue, Identifier(field)) -> Paren(InclusiveAnd(
      ShiftRight(lvalue, Integer(<int-to-string> shift)),
      field-mask
    ))
    where
      type := <get-type ; ?Bitfields(_, size)> lvalue
      ; BitfieldRange(shift, _) := <get-bitfield-range> field
      ; field-mask := Hexadecimal(<get-bitfield-size ; bitmask> field)
