module names

language MetaC

test wildcard should be the default referred failure block [[
  MaybeError<int> f() { return Error(); }
  void g() {
    attempt {
      [[int a ?= f();]]
    } [[fail {
    }]]
  }
]] resolve #1 to #2

test wildcard should be the default referred failure block, if error type was not found [[
  MaybeError<int,float32> f() { return Error(); }
  void g() {
    attempt {
      [[int a ?= f();]]
    } [[fail {
    }]]
  }
]] resolve #1 to #2

test wildcard should be the default referred failure block, int32 != float32 [[
  MaybeError<int,float32> f() { return Error(); }
  void g() {
    attempt {
      [[int a ?= f();]]
    } fail (int32 a) {
    } [[fail {
    }]]
  }
]] resolve #1 to #2

test fail block with a type if error type was found [[
  MaybeError<int,float32> f() { return Error(); }
  void g() {
    attempt {
      [[int a ?= f();]]
    } [[fail (float32 a) {
    }]]
  }
]] resolve #1 to #2

test resolve to the second fail block, as that one matches [[
  MaybeError<int,float32> f() { return Error(); }
  void g() {
    attempt {
      [[int a ?= f();]]
    }
    fail (int32 a) {
    } [[fail (float32 a) {
    }]]
  }
]] resolve #1 to #2

test resolve error value variable [[
  void g() {
    attempt {
    }
    fail (int32 [[a]]) {
      [[a]];
    }
  }
]] resolve #2 to #1

test ?= decl outside attempt should generate an error [[
  void f() {
    uint32 x ?= y();
  }
]] /should be placed inside an attempt block/

test ?= decl outside/below an attempt should generate an error [[
  MaybeError<uint32> g() {}
  void f() {
    attempt {
      uint32 x ?= g();
    } fail {}
    uint32 x ?= g();
  }
]] /should be placed inside an attempt block/

test ?= decl inside a fail {} should generate an error [[
  MaybeError<uint32> g() {}
  void f() {
    attempt {
    } fail {
      uint32 x ?= g();
    }
  }
]] /should be placed inside an attempt block/

test ?= decl inside a fail (T e) {} should generate an error [[
  MaybeError<uint32,uint8> g() {}
  void f() {
    attempt {
    } fail (uint8 e) {
      uint32 x ?= g();
    }
  }
]] /should be placed inside an attempt block/

test ?= decl inside attempt should not generate an error [[
  MaybeError<uint32> g() {}
  void f() {
    attempt {
      uint32 x ?= g();
      if (1) uint32 x2 ?= g();
    } fail {}
  }
]]
