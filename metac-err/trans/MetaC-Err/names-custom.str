module MetaC-err/names-custom

imports

  runtime/nabl/-
  runtime/task/-
  runtime/properties/-
  runtime/types/-
  runtime/relations/-
  runtime/editor/-

  BaseC/types/-
  signatures/BaseC/Expr-sig
  signatures/BaseC/Program-sig
  BaseC/desugar/constructors

  MetaC-Err/constructors
  names/MetaC-Err/names
  signatures/MetaC-Err-sig

rules

  nabl-use-fail(|lang, ctx, uri*):
    type -> choice
    where
      ns := NablNsErrFailGuarded()
      ; uri := <lookup-uri(|lang, ns)> uri*
      ; subtasks := <nabl-resolve-all-tasks(|ctx, ns, [Prop(NablProp_err-fail-type(), type, [])])> [uri]
      ; choice := <task-create-choice(|ctx)> subtasks

  nabl-use-site(|lang, ctx, uniques, uris, states) =
    ?d@ErrVarDeclaration(_, _, Call(fn, _))
    // lookup the type of the function variable, FunType(...)
    ; fn-type := <new-task-fixdeps(|ctx, [])> Id(<get-or-create-property-task(|ctx, Type())> fn)
    // Get the error value type
    ; err-type := <new-task-fixdeps(|ctx, [fn-type])> Rewrite("err-error-type", fn-type)
    // lookup the error type that matches a guarded (with parameter) fail block
    ; task-guard := <nabl-use-fail(|lang, ctx, uris)> err-type
    // lookup the wildcard failure
    ; task-wildcard := <nabl-use-candidate(|lang, ctx, uris, "_")> UseCandidate(NablNsErrFailWildcard(), [], Current(), True(), [])
    // either of these
    ; task := <task-create-choice(|ctx)> [task-guard, task-wildcard]
    // if it's not found, show an error that no compatible fail block was found
    ; <nabl-fix-name; task-create-error-on-failure(|ctx, task, "No compatible fail block found")> d
    // set the Use(_) to the resuling fail block
    ; <replace-annotation(?Use(_) | <new-use(|ctx, task)>)> d

  task-rewrite: ("err-error-type", Function(Type(_, ErrMaybeError(_, Type(_, err-type), _)), _)) -> err-type

  nabl-constraint(|ctx):
    Program(_, decls) -> <fail>
    where
      msg := $[An attempt-error assignment should be placed inside an attempt block]
      ; <rec x(
        // create error if the traversal reaches this node
        ?e@ErrVarDeclaration(_, _, _) ; task-create-error(|ctx, msg)
        // traverse into the fail blocks, but not in the main block
        <+ ?ErrAttemptStatement(_, _, f1, f2) ; <all(try(x))> [f1, f2]
        // traverse all other nodes
        <+ all(try(x))
      )> decls
