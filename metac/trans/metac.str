module metac

imports

  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  editor/Outliner
  editor-common.generated
  runtime/index/-
  runtime/nabl/-
  runtime/properties/-
  runtime/types/-
  runtime/task/-
  runtime/analysis/-
  runtime/editor/-
  names/names
  generate-c
  generate-dot
  pp
  test-utils
  desugar/-
  signatures/BaseC/Program-sig
  BaseC/analysis/disamb
  BaseC/types/-
  MetaC-bitfield/trans
  MetaC-SM/trans

rules // Analysis

  is-source-ast-test =
    is-substring(!"BaseC/syntax/__tests__/")
    <+ is-substring(!"BaseC/pp/__tests__/")

//  editor-analyze =
//    ?tuple
//    ; ?(ast, path, project-path)
//    // hack to just get the original AST for syntax tests
//    // as that's what we like to test for the syntax definitions
//    // testing the analyzed AST is what we do somewhere else
//    ; if (<is-source-ast-test> path) then
//        !ast
//      else
//        <analysis-default-editor> tuple
//      end

  pre-analysis:
    File(file, Program(_, decls), num) -> File(file, <disamb> Program(file, decls), num)

  editor-analyze = ?input; map(pre-analysis) ; analyze-all(desugar-all, id, id|<language>)

//  analysis-single-default-interface =
//    ?tuple
//    ; <analysis-single-default(desugar-all(|tuple), post-trans-all(|tuple), id|<language>)> tuple
//
//  analysis-multiple-default-interface =
//    ?tuple
//    ; <analysis-multiple-default(parse-file <+ !(), desugar-all(|tuple), post-trans-all(|tuple), id|<language>, <project-path>)> tuple
//
//  editor-save = analysis-save-default(|<language>)

rules // Editor services

  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
      definition := <analysis-resolve(|<language>, project-path)> node

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) ->
      <get-editor-properties(pp-partial-MetaC-string |<language>, project-path);properties-to-html>target

  // Gathers the outline nodes for the outline view.
  editor-outline:
    (node, position, ast, path, project-path) -> outline
    where
      outline := <simple-label-outline(to-outline-label)> ast

  // Gathers the properties for the properties view.
  editor-properties:
    (target, position, ast, path, project-path) ->
      <get-all-editor-properties(pp-partial-MetaC-string |<language>, project-path)>target

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
      proposals := <analysis-propose-completions(|<language>, project-path)> ast

  // Formats the program using a pretty printer.
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected

rules // Debugging

  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := ast

  debug-index-project =
    analysis-debug-index-project(|<language>)

  debug-index-project-resolve =
    analysis-debug-index-project-resolve(|<language>)

  debug-index-partition =
    analysis-debug-index-partition(|<language>)

  debug-task-project =
    analysis-debug-task-project(|<language>)

  debug-task-partition =
    analysis-debug-task-partition(|<language>)

  debug-task-selection =
    analysis-debug-task-selection(|<language>)

  debug-index-partition-resolve =
    analysis-debug-index-partition-resolve(|<language>)

  debug-project =
    analysis-debug-project(|<language>)

  debug-partition =
    analysis-debug-partition(|<language>)

  debug-reanalyze =
    analysis-debug-reanalyze(|<language>)
